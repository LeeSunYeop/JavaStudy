1. 데몬스레드: main 스레드가 dead가 되면, 함께 dead가 되는 스레드..
2. 접근순서에 의한 동기화
3. Calendar클래스 <--> Date <--> String
4. I/O -> input/output 약자
5. 프로그래밍에서는 왼쪽이 기준이다.
6. I/O 그림을 그릴 수 있어야 합니다.
7. I/O 작업할 때, 반드시 구조를 만들고 작업하세요.
- 스트림 선언
- try~catch~finally
- finally에 스트림의 close( )메서드 호출.. 자바프로그램과 접한 스트림부터 장치쪽으로 접한 스트림 순서에 맞게 호출
- catch: e.printStackTrace( );
- try: 스트림 객체 생성..

스트림은 크게 3가지 기준으로 분류함.
1. 용도에 따른 분류
- 입력 스트림: 장치에서 프로그램으로 데이터를 가져오는 기능의 스트림
- 출력 스트림: 프로그램에서 장치로 데이터를 내보내는 기능의 스트림

2. 데이터 전송 크기에 따른 분류
- 바이트 스트림: 1바이트씩, 어떤 종류의 데이터든 가능, 모든 장치에서 지원, ~Stream
- 문자 스트림: 2바이트씩, 텍스트 데이터만 가능, 지원할 수도 있고 안 할 수 있음, ~er

3. 특별한 기능을 갖고 있는지 여부에 따른 분류
 = 장치와 직접적으로 연결할 수 없는지 여부에 따른 분류
- 노드 스트림: 특별한 기능은 없음.         장치와 직접적으로 연결 가능
- 필터 스트림: 특별한 기능을 갖고 있음.   장치와 직접적으로 연결이 불가능



< IOEx1 프로젝트 이어서 >
< net.daum 패키지에  Cat 클래스 생성 >
package net.daum;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.Writer;

public class Cat {
	
	public void p1() {  // 출력하기
		// 문자스트림의 최상위 부모클래스
		// Writer: 출력에 관한 문자스트림의 최상위 부모클래스: 추상클래스
		// Reader: 입력에 관한 문자스트림의 최상위 부모클래스: 추상클래스
		
		Writer out = null;
		
		try {
			out = new FileWriter("C:"+File.separator+"test_char.txt");
			out.write("딘딘");
			out.write(System.lineSeparator());
			out.write("카타르 월드컵");
			out.write(System.getProperty("line.separator"));
			out.write("1무2패 예언");
			
			out.flush();
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				out.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	public void p2() {  // 읽어오기
		// c:test_char.txt 파일의 내용을 읽어와서 콘솔창에 출력하세요.
		Reader in = null;
		
		try {
			in = new FileReader("C:"+File.separator+"test_char.txt");
			
			int what = -1;
			
			while((what = in.read()) != -1) {
				System.out.println((char)what);
			}		
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				in.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	public void p3() {  // 배열을 이용한 속도향상
		// c:/test_char.txt의 내용을 읽어와서 콘솔창에 출력하세요
		// 배열을 이용하세요
		Reader in = null;		
		
		try {
			in = new FileReader("C:"+File.separator+"test_char.txt");
			
			char[] arr = new char[1024];
			int len = -1;
			
			while((len = in.read(arr)) != -1) {
				for(int i=0; i<len; i++) {
					System.out.println(arr[i]);
				}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				in.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}		
	}
	
	public void p4() {  // BufferedReader사용하여 속도향상
		Reader in = null;
		BufferedReader br = null;
		
		try {
			in = new FileReader("C:"+File.separator+"test_char.txt");
			br = new BufferedReader(in);
			
			String what = null;
			
			while((what = br.readLine()) != null) {
				
				System.out.println(what); // 원본에는 줄바꿈이 있는데 읽어올때는 줄바꿈없이 읽어온다
			}
		
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				br.close();
			} catch (IOException e) {				
				e.printStackTrace();
			}
			
			try {
				in.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}		
	}
	
	public void p5() {
		// c:/test_char.txt의 파일을 복사하세요
		// c:/test_char2.txt의 파일로..
		long a = System.currentTimeMillis();
		
		Reader in = null;
		BufferedReader br = null;
		
		Writer out = null;
		BufferedWriter bw = null;
		
		try {
			in = new FileReader("C:"+File.separator+"test_char.txt");
			br = new BufferedReader(in);
			
			out = new FileWriter("C:"+File.separator+"test_char2.txt");
			bw = new BufferedWriter(out);
					
			String what = null;
			
			while((what = br.readLine()) != null) {
				
				bw.write(what);
				bw.write(System.getProperty("line.separator"));
			}
			
			bw.flush();
			
		} catch (Exception e) {
			e.printStackTrace();
			
		} finally {
			try {
				br.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			try {
				in.close();
			} catch (IOException e1) {
				e1.printStackTrace();
			}
			
			try {
				bw.close();
			} catch (IOException e1) {
				e1.printStackTrace();
			}
			
			try {
				out.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		long b = System.currentTimeMillis();
		System.out.println(b-a);
	}

	public void p6() {
		//PrintWriter  기존에 있던 내용을 없애고 그위에 덮어 씌운다.
		PrintWriter pw = null;
		
		try {
			pw = new PrintWriter("C:"+File.separator+"test_char.txt");
			pw.append("hello");
			pw.append("word");
			pw.print(false);     // hellowordfalse 나옴
			pw.flush();
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				pw.close();
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
	}
	
	public void p7() {
		Writer out = null;
		PrintWriter pw = null;
		
		try {
			out = new FileWriter("C:"+File.separator+"test_char.txt", true);
			pw = new PrintWriter(out);
			
			pw.append("append test");
			pw.write("\n");
			pw.write("today");
			pw.write("\n");
			pw.write("hhhh"); 	
			
		} catch (Exception e) {
			e.printStackTrace();
			
		} finally {
			try {
				out.close();
			} catch (IOException e) {			
				e.printStackTrace();
			}
			
			try {
				pw.close();
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
	}
	
	public void p8() {
		// 모든 장비는 바이트스트림을 지원합니다.
		// 하지만 문자스트림은 일부 장비만 지원합니다.
		// 문자스트림으로 작업을 하고 싶을 때가 있습니다.
		// 그런데 해당 장비는 바이트스트림을 지원할 때.
		// 어떻게 해야하는가?
		// InputStreamReader
		// OutputStreamWriter
		// 자바프로그램 - 문자스트림 - isr or osw - 바이트스트림 - 장치
		
		InputStream in = null;
		InputStreamReader isr = null;
		BufferedReader br = null;
		
		try {
			in = new FileInputStream("C:"+File.separator+"test_char.txt");
			isr = new InputStreamReader(in);	// 중간에 양쪽을 이어주는 역할
			br = new BufferedReader(isr);
			// 중요함!!
			// new 를 사용할 때만 close() 메서드를 사용하고
			// get 을 사용한 메서드는 close() 메서드를 사용하면 안된다.
			
			String what = null;
			while((what = br.readLine()) != null) {
				System.out.println(what);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				br.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				isr.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				in.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

}

=========================
< dwitt 패키지에 MainEx2 클래스 생성 >
package kr.co.dwitt;

import net.daum.Cat;

public class MainEx2 {

	public static void main(String[] args) {
		Cat cat1 = new Cat();
		
		cat1.p5();

	}

}



=========================
< FileEx1 프로젝트 생성 >
< com.naver 패키지에  Dog 클래스 생성 >
package com.naver;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Calendar;
import java.util.Date;

public class Dog {
	
	public void me1() {
		// File 클래스
		// directory(=folder), file
		// directory 생성, 삭제
		// file 삭제
		// f는 파일이 아닙니다.
		// f는 파일객체입니다.
		File f = new File("C:"+File.separator+"AAA");
		
		f.mkdir();  // 폴더 AAA가 생성된다
	}				// mkdir 는 make디렉토리
	
	public void me2() {
		File f = new File("C:"+File.separator+"AAA");
		
		if(!f.exists()) {  // 실무에선 이렇게 코드를 짠다.
			f.mkdir();
		}
		
	}
	
	public void me3() {
		// File 클래스로 파일 생성은 안된다.
		File f = new File("C:"+File.separator+"a500.txt");
		
		if(!f.exists()) {  
			try {
				f.createNewFile();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	public void me4() {   // 폴더생성하고 폴더안에 또 폴더 생성하기
		// Calendar 객체 생성하시오
		Calendar cal = Calendar.getInstance();
		int year = cal.get(Calendar.YEAR);
		int month = cal.get(Calendar.MONTH)+1;
		int date = cal.get(Calendar.DATE);
		
		File f1 = new File("C:", ""+year);
		if(!f1.exists()) {
			f1.mkdir();  // 2022폴더가 생성됨
		}
		
		File f2 = new File(f1, month+"");
		if(!f1.exists()) {
			f2.mkdir();  // 2022폴더안에 11이 생성됨
		}
		
		File f3 = new File(f2, date+"");
		if(!f3.exists()) {
			f3.mkdir();  // 2022폴더안에 11폴더 안에 30폴더 생성됨
		}
	}
	
	public File me5() { // me6에 파일 저장하기 위해서 File 씀
		Calendar cal = Calendar.getInstance();
		
		Calendar cal2 = (Calendar) cal.clone();
		cal.add(Calendar.DATE, 1);
		System.out.println(cal); // 1을 더한 날짜 폴더가 생성됨
		
		int year = cal.get(Calendar.YEAR);

		int month = cal.get(Calendar.MONTH)+1;
		String s_month = String.format("%02d", month); 
		// %02d d는 정수, s는 string, f는 실수,  2는 두자리 를 뜻함, %는 값을 입력하겠다는 의미임
		
		int date = cal.get(Calendar.DATE);
		String s_date = String.format("%02d", date);
		
		File f1 = new File("C:", ""+year);
		if(!f1.exists()) {
			f1.mkdir();  
		}
		
		File f2 = new File(f1, s_month);
		if(!f1.exists()) {
			f2.mkdir();  
		}
		
		File f3 = new File(f2, s_date);
		if(!f3.exists()) {
			f3.mkdir();  
		}
		
		cal = cal2;
		
		return f3;  // 날짜꺼 파일 객체 반환
	}
	
	public void me6() {
		File f1 = me5();
		
		String path = f1.getAbsolutePath();
		System.out.println(path.substring(2));  //path -> C:\2022\12\01 이렇게 나옴
		// path.substring(2) -> \2022a\12\01 나옴 C: 코드가 삭제됨
	}
	
	public void me7() {
		File f = new File("C:"+File.separator+"test100.txt");
		if(f.exists()) {  // 파일 삭제하기
			f.delete();   // test100.txt 삭제됨
		}
	}
	
	public void me8() {
		File f = new File("C:"+File.separator+"a200.txt");
		
		String path = f.getAbsolutePath();
		System.out.println(path);  // C:\a200.txt 확장자가 붙은 파일명까지 나옴 
	}

	public void me9() {
		File f = new File("."); // .은 현재 디렉토리를 말함
		
		String[] arr = f.list();
		
		for(int i=0; i<arr.length; i++) {
			System.out.println(arr[i]);
//			.classpath
//			.project
//			.settings
//			bin
//			src	     파일명이 나온다
		}
		
		System.out.println(">>>>>>>>>>>");
		System.out.println(f.getName());  // . 나옴
		System.out.println(f.getAbsolutePath());
		// D:\java\workspace_java\FileEx1\. 나옴 
	}
	
	public void me10() {
		File f = new File("C:", "test.jpg");
		//System.out.println(f.getName());  // test.jpg나옴
		//System.out.println(f.length());  // 8396916 8메가정도 나온다.
		long size = f.length();
		long ori = size;
		
		File f2 = new File("C:", "zzz.jpg");
		InputStream in = null;
		BufferedInputStream bis = null;
		
		OutputStream out = null;
		BufferedOutputStream bos = null;
		
		try {
			in = new FileInputStream(f);
			bis = new BufferedInputStream(in);
			
			out = new FileOutputStream(f2);
			bos = new BufferedOutputStream(out);
			
			byte[] arr = new byte[1024];
			int len = -1;
			
			while((len = bis.read(arr)) != -1) {
				bos.write(arr, 0, len);
				
				size = size - len;
				System.out.println((size*100)/ori+" 만큼 남았습니다.");
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {	
			try {
				bis.close();
			} catch (IOException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}
			
			try {
				in.close();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			try {
				bos.close();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
						
			try {
				out.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		f.delete();

	}
}


=========================
< dwitt 패키지에 MainEx 클래스 생성 >
package kr.co.dwitt;

import com.naver.Dog;

public class MainEx {

	public static void main(String[] args) {
		Dog dog1 = new Dog();
		dog1.me10();

	}

}


========================
오라클 다운 설치
Oracle Database Express Edition (XE) 이게 있어야 무료임
https://www.oracle.com/database/technologies/xe-prior-release-downloads.html  오라클주소
Oracle Database 11gR2 Express Edition for Windows x64 다운로드


CMD: -----
sql developer: 동기화 문제
elipse: --------db 작업할 수 있게...

structure
query
language

< 오라클 접속 >
sqlplus 입력
계정: system(자동으로 부여되는 계정)
비번: sys1234(오라클 설치 시 입력한 비번)

비밀번호를 입력하면 커서가 안 움직임.. 그래도 입력이 되고 있음
Connected to:
Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production
나오면 잘 된것임

< 오라클 종료할 때 >
작업하다 그냥 닫기버튼 x를 누르면 절대 안된다.
exit 또는 quit를 입력하여 종료

========
;을 반드시 입력해야만 실행이 되는 것은 sql문이고,
;을 입력해도 되고, 안 해도 되는 것은 sqlplus의 명령문이다

sqlplus system/sys1234 바로 입력해서 접속해도 되지만 비번노출이 되어 안좋다

< 계정 생성: dw1 >
CREATE USER  dw1 IDENTIFIED BY dw1;
앞의 dw1은 계정명, 뒤 dw1은 비번

SQL> show user
USER is "SYSTEM"
SQL> CREATE
  2  USER
  3  dw1
  4  IDENTIFIED BY
  5  dw1
  6  ;

User created.


< 권한 설정: dw1에게 >
GRANT CONNECT, RESOURCE, DBA TO dw1;
권한 설정시 , system 계정으로 로그인한 상태에서
권한이 없는 계정은 로그인이 안 됨.

SQL> GRANT
  2  CONNECT, RESOURCE, DBA
  3  TO dw1
  4  ;

Grant succeeded.

===
create, alter, drop, grant, revoke,
insert, select, update, delete, truncate
commit, rollback,
savepoint


SQL> conn dw1/dw1
Connected.
SQL> show user
USER is "DW1"
SQL> exit

권한을 설정하고 나서 로그인할 때 sqlplus dw1/dw1 입력해서 접속할 수 있다

< 권한 취소: dw1으로부터 >
REVOKE CONNECT, RESOURCE, DBA FROM dw1;

SQL> show user
USER is ""    ---> 권한이 취소되어 아무것도 없음
SQL> conn system/sys1234
Connected.
SQL> show user
USER is "SYSTEM"
SQL> GRANT CONNECT, RESOURCE, DBA TO dw1;

Grant succeeded.

SQL> show user
USER is "SYSTEM"
SQL> conn dw1/dw1
Connected.
SQL> show user
USER is "DW1"
SQL>

< 계정 개조(수정): dw1 >
ALTER USER dw1 IDENTIFIED BY dw2;

SQL> conn system/sys1234
Connected.
SQL> conn dw1/dw1
ERROR:  --> 비번이 수정되어 오류뜸
ORA-01017: invalid username/password; logon denied
Warning: You are no longer connected to ORACLE.

SQL> show user
USER is "" --> 비번이 수정되어 아무것도 없음
SQL> conn dw1/dw2  --> 비번 바뀐걸로 접속
Connected.
SQL> show user
USER is "DW1"


계정 다시 수정
ALTER USER dw1 IDENTIFIED BY dw1;


< 계정 삭제: dw1 >
DROP USER dw1;
권한이 있는 다른 계정으로 로그인한 상태에서 진행

< 오라클 접속하는 다른 방법 > 
sqlplus 계정명/비번 















