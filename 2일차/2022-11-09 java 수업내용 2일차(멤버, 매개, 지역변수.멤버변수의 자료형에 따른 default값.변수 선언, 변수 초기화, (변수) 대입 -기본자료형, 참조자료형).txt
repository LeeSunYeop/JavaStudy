자료형(type)
- 기본자료형(primitive type)
   - boolean: true, false
   - char(문자형): ''(작은따옴표) 안에 한 글자 표현
   - byte: 정수 -128 ~0~ 127 까지 표현 가능, 일반적으로 멀티미디어파일의 데이터로 사용, 1바이트할당=8비트
   - short: 2바이트 할당, 정수
   - int: 정수형의 기본자료형, 4바이트 할당.. 약-12억 ~ 21억
   - long: 정수, 값의 마지막에 L/l을 붙여준다.
   - float: 소수, 값의 마지막에 F/f를 붙여준다. 4바이트할당
   - double: 실수형의 기본자료형, 8바이트할당

- 참조자료형(reference type)
   - 기본자료형이 아닌 자료형

변수 선언은 main( )메서드에서만 하나요?
절대 아닙니다

	public void me1() {
	// 무반환 무파람
	// main()메서드에서만 변수 선언하나요? 절대 아닙니다.
		// 변수선언공식
		// 자료형 변수명 = 자료형에 맞는 값;
		boolean a = true;
		
		char b = '안';
		
		byte c = -128;
		short d = 300;
		int e = 2;
		long f = 3L;
		
		float g =3.14F;
		double h = 9.8;
		
		Cat i = new Cat(222);  // import com.samsung.Cat; 생성되어야 오류안뜸
	}

##########
프로젝트명: Test ex 1
package: com.naver 
            kr.co.dwitt : main ex클래스 만들고 그안에 main()메서드 생성
            net.daum

net.daum 에 
1. cat클래스 만들어 주세요
2. Cat 클래스의 필드 영역에 변수를 선언하는데
하나는 기본자료형, 다른 하나는 참조자료형을 이용해서
멤버변수 2개를 선언하세요

필드 영역에 선언된 변수를 뭐라고 한다?
멤버변수..

생성자의 { } 안이나 메서드의 { } 안에 선언된 변수는 뭐라고 한다?
local 변수(=지역변수)

생성자 이름 옆의 ( )나 메서드 이름 옆의 ( ) 안에 선언된 변수
매개변수(=파라미터)

위치에 따른 변수 분류
- 필드: 멤버변수(객체의 구성요소를 표현)
- 메서드나 생성자의 ( ): 매개변수
- 메서드나 생성자의 본문({ }): local(지역) 변수

package com.naver;

public class Dog {
	// 클래스
	// 변수 선언 위치: main(), 일반 메서드, 생성자 + 필드
	// member 변수 
	// 클래스안에 있는 변수를 멤버변수, 같은 변수를 중복사용하면 안된다.
	boolean booleanA = false;
	char charB = 'B';
	byte byteC = 0;
	short shortD = 2;
	int intE = 3;
	long longF = 3L;
	float floatG = 3.0F;
	double doubleH = 2.222;
	
	String stringI = new String("music");
	
	
	
	public Dog() {
		// 생성자
		// local 변수(지역변수)
		
		System.out.println(booleanA);
		int test = 1;
		System.out.println(test);
		
	}
	
	public void me1(char a) { //char a: 매개변수
		// 메서드
		// local 변수(지역변수)
		int test = 1;
		
		System.out.println(booleanA);
		
	}
	
	
변수 스코프: 변수를 호출할 수 있는 영역..

멤버변수: 클래스 전체 + @
매개변수: 해당 메서드나 생성자의 본문 전체
지역변수: 지역변수 선언 후부터 해당 변수를 선언한 위치의 }까지

필드 영역에 선언된 멤버변수, 생성자, 메서드는 형제관계..
순서가 바뀌어도  멤버변수가 인식이 됩니다.


변수는 선언 위치에 따라 3가지로 분류된다.
1. 멤버변수: 필드, 객체의 구성요소를 의미
                스코프는? 클래스 전체 + @

2. 매개변수: 생성자나 메서드의 ( )에 선언
                스코프는? 생성자나 메서드 전체

3. 지역변수: 생성자나 메서드의 본문({ })에 선언
                스코프는? 선언된 이후 }까지

변수 선언 공식을 좀 변경합니다

-지역변수의 변수 선언 공식
자료형 변수명 = 자료형에 맞는 값;

- 매개변수의 변수 선언 공식
자료형 변수명

- 멤버변수의 변수 선언 공식
(접근제한자) 자료형 변수명 = 자료형에 맞는 값;
(접근제한자) 자료형 변수명;  ------ 이걸 더 많이 사용함

- 멤버변수의 자료형에 따른 default값 
   boolean: false
   char: ' '공백
   정수형 + 실수: 0
   참조자료형: null

#############
Turtle 클래스로 만들어진 객체는
id: 정수가 입력됩니다.                          int id;
name: 문자열 데이터가 입력됩니다.         String name;  
age: 정수가 입력됩니다.                        int age;


멤버변수를 선언할 때,
접근제한자 자료형 변수명;
형태로 변수를 선언하면
(초깃)값이 누락된 것처럼 보이지만
자료형에 따른 default값이 존재한다.

####
dwitt패키지에 Person 클래스 생성

참조자료형을 이용해서 변수를 만들면,
그 변수를 뭐라고 한다?
객체 = 인스턴스
변수명을 레퍼런스라고 합니다

Dog d1 = new Dog( );
new Dog( );  객체, 인스턴스
d1: 레퍼런스

#########
id: 문자열로 되어 입력됨
name: 문자열로 입력됨
dog1: Dog 클래스로 만들어져 있음
cat1 = new Cat( );

	String id;
	String name;
	Dog dog1;  // 있을 수도 있고 없을 수도 있다
	Cat cat1 = new Cat();  // cat은 무조건 있다.

##########
자료형 변수명 = 자료형에 맞는 값;

변수 선언: 
- 자료형 변수명;
변수 초기화:
- 자료형 변수명 = 자료형에 맞는 값;
- 생성자 배울 때 하나 더(멤버변수에만 해당 됨)
(변수) 대입: 이미 변수가 선언된 후에 변수에 들어가는 값을 수정...
- 변수명 = 자료형에 맞는 값;

대입
a = 100;

변수 선언
Solo a;

변수 초기화
Dosirak a = new Dosirak(1, 3, "hello", true);

publilc void me1( ){
	a = 100;  -> 자료형 없으므로 멤버변수 임, 대입
}

public void k2(String msg){
	msg = "hello";  -> 앞에 자료형이 없으므로 대입임
}

public Show(int a){    // int a->매개변수 선언
	int c = 55;   -> 변수 초기화이다
}

생성자 안에서 멤버변수에 값을 대입하는 모습은 대입이 아니라 초기화다
public TTT( ){  생성자
	dog1 = new Dog( );  초기화이고 멤버변수임
}

public void TTT( ){  메서드
	dog1 = new Dog( );  대입이고 멤버변수임
}

#####
대입은 필드 영역에서는 불가하다.
필드 영역에서는 메서드 호출도 안 된다.

필드에서 가능한 작업
- 변수 선언, 변수 초기화, 생성자 생성, 메서드 생성

필드에서는
대입과 메서드 호출이 불가하다

############
기본 자료형: 기본자료형으로 선언된 변수는 값을 직접 갖고 있음.
int a = 10;
--> stack에 4바이트가 할당되고, 그 영역을 a 라고 부르며, 그 영역에 10이 저장됨

int b = 40;
--> stack에 4바이트가 할당되고, 그 영역을 b 라고 부르며, 그 영역에 40이 저장됨

int c = b;
--> stack에 4바이트가 할당되고, 그 영역을 c 라고 부르며, 그 영역에 40이 저장됨


참조자료형: 참조자료형으로 선언된 변수는 객체가 저장된 힙메모리의 주소를 값으로 갖고 있음.
new: 힙메모리에 객체를 저장할 공간을 새로 마련해라
new Dog( ): 진짜 객체
Dog d1 = new Dog( );
--> 힙메모리에 진짜 객체를 저장할 공간을 새로 마련하고, 그 안에 new Dog( )를 저장해라.
     그리고 그 힙메모리의 주소(int형)를 stack에 4바이트를 할당하고 그 영역을 d1이라고 부르며 
     그 stack 영역에 객체의 힙메모리 주소를 저장하라.

Dog d2 = new Dog( );
--> 힙메모리에 진짜 객체를 저장할 공간을 새로 마련하고, 그 안에 new Dog( )를 저장해라.
     그리고 그 힙메모리의 주소(int형)를 stack에 저장함. 이때 stack 영역에 4바이트를 할당하고
     그 stack 영역을 d2라고 부르며, 그 d2에 진짜 객체가 정한 힙메모리 주소를 저장하라.

Dog d3 = d2;
--> d2가 갖고 있는 힙메모리의 주소를 d3에 대입해라.

참조자료형으로 변수를 선언하면, 그걸 객체라고 한다
Dog d = new Dog( );
변수 d인데..
객체 d라고 말하고
진짜 객체는 new Dog( ); 이다

객체 
- 현실 세계의 명사(추상명사)를 소프트웨어적을 구현하여 사용 가능케 하기위해 램(주기억장치)에 로딩한 자원
- 참조자료형으로 생성된 변수를 객체라고 함
- 그러나 좀 더 엄밀하게 분석하면.. =(대입연산자) 뒤에 new ~로 적혀 있는 부분이 진짜 객체다

클래스
- 객체를 만들기 위한 소스 코드
- class라는 키워드가 붙어 있는 소스 코드를 의미한다.
- 가장 대표적인 참조자료형 중의 하나입니다.

클래스의 구성 요소
- 멤버변수: 객체의 구성 요소가 됨
- 생성자: 객체를 생성할 수 있게 하는 역할.... 멤버변수의 초기화를 담당함
- 메서드: 객체의 능력(=기능)을 표현할 때 사용합니다.

참조자료형 변수명 = new 참조자료형( );
참조자료형 변수명 = new 생성자( );































































































































































































































































































































































































































































































