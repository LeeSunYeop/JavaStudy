생성자 학습

접근제한자
public
protected
(디폴트)
private
멤버변수는 99.99%가 접근제한자를 private을 사용함.
외부에서 멤버변수에 접근할 수 없음.
멤버변수의 값을 가져올 수도 없고
멤버변수의 값을 수정할 수도 없음.
==> getters/setters 
===================================
클래스: public, 디폴트
sub클래스: 디폴트
내부클래스: 4개 다 사용함.

===================================
생성자
--------------------생성자 옆에 있는 ( )에 매개변수 유무
디폴트 생성자
사용자 생성자
---------------------
클래스에 생성자가 안 보이면, 디폴트 생성자는 숨겨져 있음.
개발자가 생성자를 타이핑하지 않았으면, 디폴트 생성자가 안 보여도 존재한다
즉 눈에 안 보이지만 디폴트 생성자가 있다는 것...

클래스에 생성자가 보이면, 보이는 생성자만 존재함.
이 상황에서 만약에 디폴트 생성자를 만들고 싶다면, 직접 타이핑

----------------------------------------------------
사용자 생성자 만들 때, 매개변수는 어떻게 할거냐?

public class Member{
	private String id;
	private String pw1;
	private String pw2;
	private int age;  -- 종속변수
	private Date birthday; -- 독립변수
}

==================================
생성자의 이름은 어떻게 결정되나? 
- 클래스명과 같음.

생성자와 메서드를 구분해야 함.: 생성자에는 반환형이 없음.

============================
생성자의 기능
- 참조자료형에 맞는 값을 제공해 줌
- 진짜 객체를 생성해 줌
- 멤버변수의 초기화를 담당함.

=========================
지역변수와 멤버변수의 이름이 같을 때,
컴파일러는 지역변수를 우선적으로 인식함.

public class Test{
	private int id;
	private String name;

	public Test( ){
	}
	public Test(int id, String name){
		this.id = id;
		this.name = name;
	}
}

=========================
DTO = TO = VO
데이터 저장 전용 클래스
Data Transfer Object
Transfer Object
Value Object

1. 클래스명을 ~DTO, ~TO, ~VO로 작성
2. Serializable 인터페이스를 구현(implements)
3. UID를 입력함: 한번 입력하고 난 후에는 변경..
4. 멤버변수 생성 시 접근제한자를 private로 설정
5. getters/setters
6. 디폴트 생성자 / 사용자 생성자
7. hashCode( ) / equals( )메서드 오버라이딩(재정의)
8. toString( ) 메서드 오버라이딩

Dog dog1 = new Dog( );
sysout(dog1.toString( ));

=======================
static 키워드가 붙으면, 
프로그램이 프로세스가 될 때,
static이 붙은 변수나 메서드는
곧 바로 메모리에 로딩이 되어 실행한 상태가 됩니다

member변수, 메서드는
프로그램이 프로세스가 될 때는
아무 일도 발생하지 않아요
코드 상에 해당 변수나 메서드가 들어 있는
클래스를 이용해서 객체를 만들 때
그 때 변수는 메모리에 로딩이 되어 실행 가능한 상태가 되고,
메서드는 호출할 때 메모리에 로딩이 되어 실행이 됩니다.

===================
선언 위치에 따른 변수 분류
- 멤버변수, 매개변수, 지역변수

실행 가능한 시점에 따른 분류(= 메모리의 저장위치에 따른 분류)
- 인스턴스변수 vs static변수(=클래스변수)

- 인스턴스변수:
 - 클래스를 이용해서 객체를 만들 때, 이때 인스턴스변수가 힙메모리에 로딩이 된다
 - 해당 변수를 호출할 때, 객체명(인스턴스명).변수명
 - 인스턴스변수는 객체가 생성될 때마다 추가로 생성됩니다.

- static 변수(=클래스변수)
 - 프로그램이 프로세스가 될 때 바로 메모리(static)에 로딩이 되니까..
 - 해당 변수를 호출할 때, 클래스명.변수명
 - 클래스 변수는 클래스당 하나만 생성됨.

int b = Test.b

객체=object=인스턴스=entity=bean (약간씩은 다르지만 거의 동일)

static변수 = 클래스변수 (직장에서 어떤걸로 사용할지 모르니 알고 잇어야한다)

변수를 사용할 때, 클래스명.static변수명

< TestEx6 프로젝트생성>
< com.naver 패키지에 Test 클래스 생성 >
package com.naver;

public class Test {
	
	public int a = 10;
	public static int b = 10;
	
	public void me1() {
		System.out.println(111);
		
		k1();
		b = 100;
		
	}
	
	public static void k1() {
		System.out.println(2222);
		
		// a = 200; 인스턴스변수를 static에 넣어서 실행하면 오류가뜬다
		// 왜냐면 아직 힙메모리에 인스턴스변수가 저장이 되지 않아 실행이 안된다
		// static은 입력하는 즉시 힙메모리에 저장이 되기 때문에 아무때나 사용이 가능하다
		Test t = new Test();
		t.a = 300;
	}
}

======================
< kr.co.dwitt 패키지에 MainEx 클래스 생성 >
package kr.co.dwitt;

import com.naver.Test;

public class MainEx {

	public static void main(String[] args) {
		Test.b = 100;  // 호출할때는 클래스명.변수명
		
		//Test.a = 100;
		Test t1 = new Test();  // 호출할때는 객체명.변수명
		t1.a = 100;  
		
		Test t2 = new Test();
		System.out.println(t1.a);
		System.out.println(t2.a);
		
		System.out.println(Test.b);
		System.out.println(t1.b);
		System.out.println(t2.b);
		
		t1.me1();
		Test.k1();
		
	}

}

========================
- 산술연산자: + - * / %

- 대입연산자: = 

- 복합연산자: 산술연산자와 대입연산자를 조합해서 만듬..
  +=, -=, *=, /=, %=

- 증감연산자: 1씩 증가, 1씩 감소시키는 연산자 
  ++ , --
 - 연산자를 변수 앞에 위치(++a): 즉시 증감
 - 연산자를 변수 뒤에 위치(a++): 나중에 해당 변수를 만났을 때, 증감값을 대입

- 비교연산자: 결과는 true, false로 나옴
 > , >=, <, <=, ==, !=

- 논리연산자: 결과는 true, false로 나옴
 &&(and), ||(or), !(not)
 
< net.daum 패키지에 Dog 클래스 생성 >
package net.daum;

public class Dog {
	int a = 0;
	
	public long arop11(int a, int b) {
		// 산술연산자: +
		// 오버플로우, 언더플로우를 조심해라
		// long을 써야한다, 형변환해야함
		
		long result = (long)a + b;
				
		return result;
	}
	
	public int arop1(int a, int b) {
		// 산술연산자: +
				
		int result = a + b;
				
		return result;
	}
	
	public void arop3(int a, int b) {
		// 산술연산자: -
				
		int result = a - b;
		System.out.println(result);				
	}
	
	public void arop4(int a, int b) {
		// 산술연산자: *
				
		int result = a * b;
		System.out.println(result);				
	}
	
	public void arop5(int a, int b) {
		// 산술연산자: /(몫연산자)  int형을 사용하면 몫만 나옴
				
		int result = a / b;
		System.out.println(result);				
	}
	
	public void arop6(double a, double b) {
		// 산술연산자: /      // double형을 사용하면 실수로 나옴
				
		double result = a / b;
		System.out.println(result);				
	}
	
	public void arop7(int a, int b) {
		// 산술연산자: %(나머지 연산자)
				
		int result = a % b;
		System.out.println(result);				
	}
	
	public void asop1(int a, int b) {
		// 대입연산자: =
				
		a = b;						
	}
	
	public void coop1(int a, int b) {
		// 복합연산자: 산술연산자와 대입연산자를 조합해서 만듬..				
	    // +=, -=, *=, /=, %=
		
		a += b;
		// a + b 하고 a에 그 결과를 대입
		System.out.println(a);
		System.out.println(b);
	}
	
	public void coop2(int a, int b) {						
	    // +=, -=, *=, /=, %=
		
		a -= b;
		// a - b 하고 a에 그 결과를 대입
		System.out.println(a);
		System.out.println(b);
	}
	
	public void coop3(int a, int b) {		
	    // +=, -=, *=, /=, %=
		
		a *= b;
		// a * b 하고 a에 그 결과를 대입
		System.out.println(a);
		System.out.println(b);
	}
	
	public void coop4(int a, int b) {		
	    // +=, -=, *=, /=, %=
		
		a /= b;
		// a / b 하고 a에 그 결과를 대입
		System.out.println(a);
		System.out.println(b);
	}
	
	public void coop5(int a, int b) {		
	    // +=, -=, *=, /=, %=
		
		a %= b;
		// a % b 하고 a에 그 결과를 대입
		System.out.println(a);
		System.out.println(b);
	}

	public void idop1(int a) {		
	    // 증감연산자: ++  -> a = a + 1
		
		System.out.println(a);  // 10나옴
		
		++a;		
		System.out.println(a);	// 11나옴	 
	}
	
	public void idop2(int a) {		
	    // 증감연산자: --  -> a = a - 1
		
		System.out.println(a);  // 10나옴
		
		--a;		
		System.out.println(a);	// 9나옴	
	}
	
	public void idop3(int a, int b) {		
	    // ++a , b++ 차이점
		
		System.out.println(a);  // 10나옴
		System.out.println(b);  // 10나옴
				
		System.out.println(++a);  // 11나옴  즉시 증감
		System.out.println(b++);  // 10나옴  나중에 해당 변수를 만났을 때, 증감값을 대입
		
		System.out.println(a);  // 11나옴
		System.out.println(b);  // 11나옴  

	}

	public void comop1(int a, int b) {		
	    // 비교연산자 >  true 나 false로 나옴
		boolean result = a > b;
		System.out.println(result);  			
	}
	
	public void comop2(int a, int b) {		
	    // 비교연산자 >=  true 나 false로 나옴
		boolean result = a >= b;
		System.out.println(result);  			
	}
	
	public void comop3(int a, int b) {		
	    // 비교연산자 <  true 나 false로 나옴
		boolean result = a < b;
		System.out.println(result);  			
	}
	
	public void comop4(int a, int b) {		
	    // 비교연산자 <=  true 나 false로 나옴
		boolean result = a <= b;
		System.out.println(result);  			
	}

	public void comop5(int a, int b) {		
	    // 비교연산자 ==  true 나 false로 나옴
		boolean result = a == b;
		System.out.println(result);  			
	}
	
	public void comop6(int a, int b) {
		// 비교연산자 !=  true 나 false로 나옴
		boolean result = a != b;
		System.out.println(result);
	}

	public void loop1(boolean a, boolean b) {
		// 논리연산자 &&(and)  true 나 false로 나옴
		boolean result = a && b;
		System.out.println(result);
	// 만약 앞의 값이 false로 먼저 나오면 뒤에 뭐가잇든 보지도 않고 false로 출력됨
	}
	
	public void loop2(int a, int b) {
		// 논리연산자 &&  true 나 false로 나옴
		boolean result = (a>b) && (a % b == 3);
		System.out.println(result);
	}
	
	public void loop3(boolean a, boolean b) {
		// 논리연산자 ||(or)  true 나 false로 나옴
		boolean result = a || b;
		System.out.println(result);
	}
	
	public void loop4(boolean a) {
		// 논리연산자 !(not)  true 나 false로 나옴
		System.out.println(a);
		a = !a;   // switch 알고리즘.
		System.out.println(a);
	}
	
	public void arop7() {
		// switch 알고리즘.
		a = 1 - a;
		System.out.println(a);
		// 출력 1 0 1 0 1 
	}

	public void biop1() {
		// 비트연산자 &
		boolean result = true & true;
		System.out.println(result);
	}
	
	public void biop2() {
		// 비트연산자 &
		int a = 2;
		int b = 5;
		
		int result = a & b;
		System.out.println(result);
		// 출력 0 나옴
		//   0   1    0 -> 2를 2진수하면
		// & 1   0    1 -> 5를 2진수하면
		//  0&1 1&0  0&1
		//   0   0    0
	}
	
	public void biop3() {
		// 비트연산자 |
		boolean result = false | true;
		System.out.println(result);
	}
	
	public void biop4() {
		// 비트연산자 |
		int a = 2;
		int b = 5;
		int result = a | b;
		System.out.println(result);
		// 출력 7 나옴
		//   0   1    0 -> 2를 2진수하면
		// | 1   0    1 -> 5를 2진수하면
		//  0|1 1|0  0|1
		//   1   1    1
		// 1*2*2 + 1*2 + 1*1 
	}
	
	public void biop5() {
		// 비트연산자 ^
		// exclusive or
		// 베타적 or
		// xor
		boolean result1 = true ^ true;
		boolean result2 = true ^ false;
		boolean result3 = false ^ false;
		boolean result4 = false ^ true;
		System.out.println(result1);
		System.out.println(result2);
		System.out.println(result3);
		System.out.println(result4);
	}
	
	public void biop6() {
		// 비트연산자 ^
		int a = 2;
		int b = 4;
		// 다르면 1, 같으면 0
		System.out.println(a^b);
	}
	
	public void biop7() {
		// 비트연산자 ~(not): 부호 반전 후 -1을 추가 연산
		int a = 4;
		int b = 3;
		int c = 2;
		int d = 1;
		int e = 0;
		int f = -1;
		int g = -2;
		int h = -3;
		int i = -4;
		System.out.println(~a);  // -5
		System.out.println(~b);  // -4
		System.out.println(~c);  // -3
		System.out.println(~d);  // -2
		System.out.println(~e);  // -1
		System.out.println(~f);  //  0
		System.out.println(~g);  //  1
		System.out.println(~h);  //  2
		System.out.println(~i);  //  3  나옴
		
	}
	
	public void shop1() {
		// shift 연산자: << 숫자를 연산할 때는 2진수로 변경후 작업
		int a = 2;
		int result1 = a << 1;
		int result2 = a << 2;
		int result3 = a << 3;
		int result4 = a << 4;
		
		System.out.println(Integer.toBinaryString(a)); // 1 0 나옴 -> 2진수 2를 나타냄
		System.out.println(result1);  // 4
		System.out.println(result2);  // 8
		System.out.println(result3);  // 16
		System.out.println(result4);  // 32 나옴
		
		//       1 0   -> 2를 2진수한거
		//     1 0    << 1 왼쪽으로 1칸이동 1*2*2 + 0 + 0
		//   1 0      << 2 왼쪽으로 2칸이동 1*2*2*2 + 0 + 0 + 0
		// 1 0        << 3 왼쪽으로 3칸이동 1*2*2*2*2 + 0 + 0 + 0 + 0
		// 이렇게 나열이 된다
	}
	
	public void shop2() {
		// shift 연산자: >>
		int a = 16;
		int result1 = a >> 1;
		int result2 = a >> 2;
		int result3 = a >> 3;
		int result4 = a >> 4;
		
		System.out.println(Integer.toBinaryString(a)); // 1 0 0 0 0 나옴 -> 16을 2진수로 나타냄
		System.out.println(result1);  // 8
		System.out.println(result2);  // 4
		System.out.println(result3);  // 2
		System.out.println(result4);  // 1  나옴
		
		// 1 0 0 0 0   -> 16을 2진수한거
		//    1 0 0 0      >> 1 오른쪽으로 1칸이동  8
		//      1 0 0      >> 2 오른쪽으로 2칸이동  4
		//        1 0      >> 3 오른쪽으로 3칸이동  2
		// 이렇게 나열이 된다
	}
	
	public void ifop1(int a) {
		// 삼항연산자(조건연산자)
		boolean result = a > 3? true : false;
		System.out.println(result);
		// a에 3이 들어가면 3 > 3? 크냐? false로 출력됨
	}
	
	public void ifop2(int a) {
		// 삼항연산자(조건연산자)
		// a가 2의 배수이면 "합격" 그렇지 않으면 "불합격"을 변수 pass에 대입하세요
		 
		 String pass = a % 2 == 0? "합격" : "불합격";
		 System.out.println(pass);
	}
	
	public void ifop3(int a, int b) {
		// a가 b보다 크면 'a' 그렇지 않으면 'b'가 result변수에 입력됨
		char result = a > b? 'a' : 'b';
		System.out.println(result);
	}

	public void t1() {
		System.out.println("no");
	}
	
	public int t2() {
		return 3;
	}
	
	public void ifop4() {
		int result = 3 == 4? t2() : 3 ;
		// t2()는 같은 int형이라 오류가 안나지만
		// t1()은 오류가 뜬다
	}
	
	public void ifop5(int a) {
		// 삼항연산자 안에 삼항연사자를 넣은 경우
		// a>4 -> 'a'
		// a==4 -> 'b'
		// a<4 -> 'c'
		char result = a > 4 ? 'a' : a==4? 'b' : 'c';
	}
	
	public void ifop6(int score) {
		char result = score >= 90? '수' : 
			score >= 80? '우' : 
				score >= 70? '미' : 
					score >= 60? '양' : '가';
		System.out.println(result);
	}
}

=======================================
< kr.co.dwitt 패키지에 MainEx2 클래스 생성 >
package kr.co.dwitt;

import net.daum.Dog;

public class MainEx2 {

	public static void main(String[] args) {
		
		Dog dog1 = new Dog();
		dog1.arop6(10, 3);

	}
	
		Dog dog1 = new Dog();
		
		dog1.arop7();		
		System.out.println("::::");
		
		dog1.arop7();		
		System.out.println("::::");
		
		dog1.arop7();		
		System.out.println("::::");
		
		dog1.arop7();		
		System.out.println("::::");
		
		dog1.arop7();		
		System.out.println("::::");
	}

}

=====================
1. 산술연산자 5개를 적어 보세요
+ - * / %

2. 대입연산자
=

3. 복합연산자 5개
+= -= *= /= %=

4 .증감연산자
++ , --

5. 비교연산자 6개
> >= < <= == !=

6. 논리연산자
&& || !

===============
- 비트연산자: 숫자를 연산할 때는 2진수로 변경후 작업
- & | ^ ~

- shift 연산자: 숫자를 연산할 때는 2진수로 변경후 작업
<<(연산하는 수에 2^n 곱),    >>(연산하는 수에 2^n으로 나눔),    >>>

>>>를 하려면 2진수로 음수를 표현하는 방법을 알아야 한다

- 삼항연산자(조건연산자)
조건식? 참일 때의 값 : 거짓일 때의 값;
조건식? 반환형이 있는 메서드 호출 : 반환형이 있는 메서드 호출;

=========================
1. 산술연산자
+ - * / %

2. 대입연산자
=

3. 복합연산자
+=  -=  *=  /=  %=

4. 증감연산자
++  --

5. 비교연산자 
>  >=  <  <=  ==  !=

6. 논리연산자
&&  ||  !

7. 비트연산자 
&  |  ^  ~

8. shift연산자
<<   >>  >>>

9. 조건연산자(삼항연산자)
자료형 변수명 = 자료형에 맞는 값? true : false;

============
0 1 2 3 4 5 0 1 2 3 4 5 0 1 2 3 4 5 0 1 2 3 4 5 ...
알고리즘 짜기 위해 사용되는 연산자는 무엇일까요? 나머지 연산자 %
i % 6 = 0

0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3  4 4 4 4 4 4 ...
연산자는? 나누기 연산자 /
i / 6 = 0
1 / 6 = 0
2 / 6 = 0
3 / 6 = 0

1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3  4 4 4 4 4 4 ...
i / 6 + 1 하면 1부터 나온다

1 0 1 0 1 0 1 0 1 0...
switch 알고리즘
int a = 0; -- 멤버변수여야 한다.
a = 1 - a;

a = a + b; 간결하게
a += b;

String a = "cola";
String b = "cida";
a에 "cida"를 넣고,
b에 "cola"를 넣고 싶습니다.
이와 관련된 알고리즘에 사용되는 연산자를 적어주세요
대입연산자 =
String temp = a;
a = b;
b = temp;

같은 값이 입력되면 0 이나 false 반환되고
다른 값이 입력되면 1 이나 true 반환되는 연산자는?
비트연산자 ^

3 * 2^10(2의 10승)을 더 빠르게 계산할 수 있는 알고리즘을 적어 보세요
shift 연산자 <<
3 << 10

a가 3의 배수이면 new Dog( ), 그렇지 않으면 new Dog(1, "땡이")
Dog dog = a % 3 == 0? new Dog( ) : new Dog(1, "땡이");

==========================
2진수로 음수를 표현하는 방법

부호	이진수로 된 값							
0	0	0	1	0	0	0	1	17를 2진수
1	1	1	0	1	1	1	0	1의 보수 
1	1	1	0	1	1	1	0+1 = 1	2의 보수 +1를 해준다
1	1	1	0	1	1	1	1	-17를 2진수
								
0	0	0	1	0	0	1	0	18를 2진수
1	1	1	0	1	1	0	1	1의보수
1	1	1	0	1	1	0	1+1 = 2	2의보수  +1를 해준다
1	1	1	0	1	1	1	0	-18를 2진수

		String binary2 = Integer.toBinaryString(-17);
		System.out.println(binary2); 출력하면 2진수로 나온다








































































































