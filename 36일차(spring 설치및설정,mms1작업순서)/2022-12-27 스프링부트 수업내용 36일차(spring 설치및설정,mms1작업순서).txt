1. D:\java\workspace_spring 생성하시오

2. 이클립스에 spring 관련 기능을 추가함
- 이클립스 메뉴 중에서 Help로 가세요
-> 이클립스 marketplace~ 클릭 -> 검색창에 spring 입력 후 검색
-> spring legacy project: 전통적인 스프링 프로젝트, mvc2 패턴이 그대로 적용됨..mybatis., spring4버전부터는 지원하지 않음.
			지원할 수 있는 플러그인을 추가합니다.
-> spring boot: 새로운 스프링 프로젝트.. 스프링재단의 전폭적인 지원


검색창에 spring 입력 후 검색 -> spring Tools 3 add-on~ install -> comfirm -> 1번째 선택 -> 창하나뜨면 다 체크하고 하단에 클릭
-> restart클릭

3. workspace 변경
- 2번에서 생성한 폴더로 변경: D:\java\workspace_spring
file -> 스위치 워크스페이스 -> other -> D:\java\workspace_spring 변경

4. perspective: java ee -> spring으로 변경 

5. classpath 변경: 
윈도우 -> preferences -> java -> installed jres -> search -> D드라이브에 톰갯9 -> bin파일이 보이면 하단에 폴더선택 클릭 
-> 생성한거 체크 -> apply

6. encoding: 
윈도우 -> preferences -> web -> css파일, html파일, jsp파일 -> encoding utf-8 로 다 선택

7. cmd창을 열고 dw5 계정을 생성하고 권한을 추가하세요.
sqlplus system/sys1234
CREATE USER dw5 IDENTIFIED BY dw5;
GRANT CONNECT, RESOURCE, DBA TO dw5;
exit

8. server 생성
data 소스 -> new -> 오라클 -> 오픈jdk C:\Program Files\ojdkbuild\java-1.8.0-openjdk-1.8.0.332-1\jre\lib\ext -> ojdbc6.jar 선택 
-> localhost, xe, dw5, dw5로 생성

9. server.xml의 63라인의 <Connector URIEncoding="UTF-8"> 추가입력


프로젝트 만들기
우클릭 -> new -> 스프링 레가시 프로젝트 -> 스프링 MVC 프로젝트 선택하면 주소가 나옴
https://dist.springsource.com/release/STS/help/org.springframework.templates.mvc-3.2.2.zip 브라우저에 입력 -> 다운 받아서 압축풀고
-> 파일 -> import -> General -> Existing Pro~ -> 2번째 선택하고 압축푼 파일들어가서 알집선택 하고 finish 한다.
그러면 projectName 생성됨 -> MMS1로 이름 변경 


pom.xml 열고 
<java-version>1.8</java-version>  -- 11행에 있음
<org.springframework-version>4.2.1.RELEASE</org.springframework-version> --12행에 있음

maven maven-resources-plugin 구글검색 -> Apache Maven Resources Plugin 사이트 접속 -> 2.6 -> 클릭해서 코드 복사 하면 아래코드가 나옴
<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-resources-plugin -->
<dependency>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-resources-plugin</artifactId>
    <version>2.6</version>
</dependency>  
복사한걸 이클립스에 가서 18행에 나두고 붙여넣기 해야함
17행에 <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-resources-plugin --> 이게 있음


<groupId>junit</groupId>
<artifactId>junit</artifactId>
<version>4.12</version> --변경 123행에 있음



<build>
        <plugins>
	<plugin> 복사해서 붙여넣기 129행부터 해야됨
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.3.2</version>
                
            </plugin>

2번째 <plugin>
                    <source>1.8</source>  154행에 수정
                    <target>1.8</target>

끝나면 저장 

projectName 선택 우클릭 -> 맨아래 proper~ 선택 -> 프로젝트 Facets 클릭 -> java에 1.8선택 -> 오른쪽에 Runtimes -> 체크하기
apply 클릭


overview 에 port Number에 8090으로 변경 하고 모듈에가서 똑같이 / 만 남게 만들기 그리고 저장


===========
pom.xml 파일에 126행에 붙여넣기 
<!-- https://mvnrepository.com/artifact/org.imgscalr/imgscalr-lib -->
<dependency>
<groupId>org.imgscalr</groupId>
<artifactId>imgscalr-lib</artifactId>
<version>4.2</version>
</dependency>

<!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
<dependency>
<groupId>commons-fileupload</groupId>
<artifactId>commons-fileupload</artifactId>
<version>1.3.1</version>
</dependency>

<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
<dependency>
<groupId>org.mybatis</groupId>
<artifactId>mybatis</artifactId>
<version>3.2.8</version>
</dependency>

<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
<dependency>
<groupId>org.mybatis</groupId>
<artifactId>mybatis-spring</artifactId>
<version>1.2.2</version>
</dependency>

<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<dependency>
<groupId>org.springframework</groupId>
<artifactId>spring-jdbc</artifactId>
<version>${org.springframework-version}</version>
</dependency>

<!-- https://mvnrepository.com/artifact/org.springframework/spring-test -->
<dependency>
<groupId>org.springframework</groupId>
<artifactId>spring-test</artifactId>
<version>${org.springframework-version}</version>
<scope>test</scope>
</dependency>

<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
<dependency>
<groupId>com.fasterxml.jackson.core</groupId>
<artifactId>jackson-databind</artifactId>
<version>2.5.4</version>
</dependency>

<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
<dependency>
<groupId>org.aspectj</groupId>
<artifactId>aspectjweaver</artifactId>
<version>1.5.4</version>
</dependency>

===============
web.xml 파일에 붙여 넣기- 한글 깨지지 않게 하는 코드

xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
다음 줄에 넣기 6행에 있음
 <filter>
  <filter-name>encoding</filter-name>
  <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
  <init-param>
   <param-name>encoding</param-name>
   <param-value>UTF-8</param-value>
  </init-param>
  <init-param>
 <param-name>forceEncoding</param-name>
 <param-value>true</param-value>
 </init-param>
 </filter>

 <filter-mapping>
  <filter-name>encoding</filter-name>
  <url-pattern>/*</url-pattern>
 </filter-mapping>


============
src/main/java 에 패키지 생성
kr.co.member.domain
kr.co.member.controller
kr.co.member.repository
kr.co.member.service



appServlet폴더에 root-context.xml 에 2번째 탭
aop, context, jdbc, mybatis, tx 체크하기

소스코드 1번째 탭에
<!-- Root Context: defines shared resources visible to all other web components -->
그 다음 줄에 입력하기
// bean은 자동생성이라는 코드이다
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="dataSource">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
		<property name="username" value="dw5"></property>
		<property name="password" value="dw5"></property>
	</bean>
	
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
		<property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"></property>	
	</bean>

	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession" destroy-method="clearCache">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
	</bean>
=====
src/main/resources 에 xml 파일 생성 
파일명은 mybatis-config
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<typeAliases>
		<package name="kr.co.member.domain"/>
	</typeAliases>  
</configuration>


src/main/resources 에 mappers 폴더 생성하기



servlet-context.xml 파일 열고
</beans:bean> 다음줄에 추가하기 
	<beans:bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
		<beans:property name="maxUploadSize" value="10485760"></beans:property>		
	</beans:bean>

==================================
< 작업 순서 >
1. table
2. dto
3. controller(mvc 핸들러 생성)
4. service
5. dao
6. mapper
7. jsp

----
1. controller insert( ) 구현
2. insert.jsp 구현
3. controller insert(dto) 구현
4. service 인터페이서 insert(dto) 구현
5. serviceImpl 클래스에서 insert(dto) 구현
6. root-context.xml 에 component-scan 등록
7. dao 인터페이스 insert(dto) 구현
8. dao 클래스 insert(dto) 구현
9. mapper

=================================
< mms1 프로젝트에  member sql 생성 >
CREATE TABLE tbl_member(
id VARCHAR2(6),
name VARCHAR2(15) NOT NULL,
birth DATE NOT NULL,
address VARCHAR2(300) NOT NULL,
pw VARCHAR2(300) NOT NULL,
email VARCHAR2(300),
grade CHAR(1) DEFAULT 'A',
CONSTRAINT pk_member_id PRIMARY KEY(id)
)

select * from tbl_member

============================
< kr.co.member.domain 에 MemberDTO 클래스 생성 >
package kr.co.member.domain;

import java.io.Serializable;
import java.util.Objects;

public class MemberDTO implements Serializable{

	private static final long serialVersionUID = 1L;
	
	private String id;
	private String name;
	private String birth;
	private int age;
	private String address;
	private String pw;
	private String email;
	private char grade;
	
	public MemberDTO() {
		// TODO Auto-generated constructor stub
	}

	public MemberDTO(String id, String name, String birth, int age, String address, String pw, String email,
			char grade) {
		super();
		this.id = id;
		this.name = name;
		this.birth = birth;
		this.age = age;
		this.address = address;
		this.pw = pw;
		this.email = email;
		this.grade = grade;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getBirth() {
		return birth;
	}

	public void setBirth(String birth) {
		this.birth = birth;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public String getPw() {
		return pw;
	}

	public void setPw(String pw) {
		this.pw = pw;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public char getGrade() {
		return grade;
	}

	public void setGrade(char grade) {
		this.grade = grade;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	@Override // id만 체크
	public int hashCode() {
		return Objects.hash(id);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MemberDTO other = (MemberDTO) obj;
		return Objects.equals(id, other.id);
	}

	@Override // id, name, grade만 체크
	public String toString() {
		return "MemberDTO [id=" + id + ", name=" + name + ", grade=" + grade + "]";
	}
		
}




============================
< kr.co.member.controller 에 MemberController 클래스 생성 >
package kr.co.member.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import kr.co.member.domain.MemberDTO;
import kr.co.member.service.MemberService;

@Controller
@RequestMapping("/member")
public class MemberController {
	
	@Autowired
	private MemberService mService;
	// MemberService 인터페이스로 만들어야한다.
	
	@RequestMapping(value = "/insert", method = RequestMethod.POST)
	public String insert(MemberDTO dto) {
		// 입력받은걸 불러와야하는데(getparamter) spring에서는 그럴 필요가 없으며
		// MemberDTO dto 입력만 해주면 된다.
		
		mService.insert(dto);
				
		return "redirect:/member/read/"+dto.getId();
		// /member/read/m001 이런식으로 넘어감		
	}
	
	@RequestMapping(value = "/insert", method = RequestMethod.GET)
	// GET방식이기 때문에 일반적으로 ui를 넣지 않는다. 
	public String insert() {
		
		
		return "member/insert";  
		// servlet-context에서 설정을 해놔서 앞뒤 경로가 저절로 생긴다.
		//<beans:property name="prefix" value="/WEB-INF/views/" />
		//<beans:property name="suffix" value=".jsp" />
	}
}



============================
< views 에 member 폴더 생성하고 insert jsp파일 생성 >
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8" session="false"%>

<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<meta name="viewport"
	content="width=device-width, initial-scale=1, shrink-to-fit=no">

<title>회원 가입 화면</title>

<link rel="stylesheet"
	href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css"
	integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N"
	crossorigin="anonymous">
<script
	src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js"
	integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
	crossorigin="anonymous"></script>
<script
	src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"
	integrity="sha384-Fy6S3B9q64WdZWQUiU+q4/2Lc9npb8tCaSX9FK7E8HnRr0Jz8D6OP9dO5Vg3Q9ct"
	crossorigin="anonymous"></script>

</head>
<body>
	<div class="container">
		<form action="/member/insert" method="post">
			<div class="form-group row">
				<label for="id" class="col-sm-2 col-form-label text-right">아이디</label>
				<div class="col-sm-10"> 
					<input class="form-control" id="id" name="id" required>
				</div>
			</div>

			<div class="form-group row">
				<label for="name" class="col-sm-2 col-form-label text-right">이름</label>
				<div class="col-sm-10">
					<input class="form-control" id="name" name="name" required>
				</div>
			</div>

			<div class="form-group row">
				<label for="pw1" class="col-sm-2 col-form-label text-right">비밀번호</label>
				<div class="col-sm-10">
					<input type="password" class="form-control" id="pw1" name="pw" required>
				</div>
			</div>

			<div class="form-group row">
				<label for="pw2" class="col-sm-2 col-form-label text-right">비밀번호(확인)</label>
				<div class="col-sm-10">
					<input type="password" class="form-control" id="pw2" required>
				</div>
			</div>

			<div class="form-group row">
				<label for="birth" class="col-sm-2 col-form-label text-right">생년월일</label>
				<div class="col-sm-10">
					<input class="form-control" id="birth" name="birth" type="date" required>
				</div>
			</div>

			<div class="form-group row">
				<label for="email" class="col-sm-2 col-form-label text-right">이메일</label>
				<div class="col-sm-10">
					<input class="form-control" id="email" name="email" type="email" required>
				</div>
			</div>

			<div class="form-group row">
				<label for="address" class="col-sm-2 col-form-label text-right">주소</label>
				<div class="col-sm-10">
					<input class="form-control" id="address" name="address" required>
				</div>
			</div>
			
			<div class="form-group row">
				<div class="col-sm-10">
     				 <button type="submit" class="btn btn-primary">가입</button>
    			</div>
    		</div>
    		
		</form>
	</div>
	
	<script type="text/javascript">
		$(document).ready(function() {
			$("button[type='submit']").click(function(event) {
				event.preventDefault();
				
				let pw1 = $("#pw1").val();
				let pw2 = $("#pw2").val();
				
				if(pw1 == "" || pw2 == ""){					
					$("#pw1").focus();
					alert("비밀번호를 입력해 주세요.")
					
					return false;
				}
				
				if (pw1 != pw2) {
					$("#pw2").val("");
					$("#pw1").select();
					$("#pw1").focus();
					alert("비밀번호가 맞지 않습니다.")
					
					return false;					
				} 
				
				$("form").submit();
												
			});			
		});
	
	</script>
	
</body>
</html>



==============================
< servlet-context.xml 파일에 코드 추가하기 >
<context:component-scan base-package="mytld.mycompany.myapp" /> 
밑에다
<context:component-scan base-package="kr.co.member.controller" /> 추가하기


==============================
https://getbootstrap.com/ 사이트 접속 -> 오른쪽 상단 4.6버전 바꾸기 -> Examples
Documen~ 에 들어가면 이렇게 사용하라는 예를 들어 코드를 짜 놓은것이다

윈도우 -> prefer~ 맨아래 클릭 -> jsp파일 templates -> new jsp파일(html 5) 더블클릭 해서 코드 추가하기 
<%@ page language="java" contentType="text/html; charset=${encoding}"
    pageEncoding="${encoding}" session="false"%>
    
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="${encoding}">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

<title>Insert title here</title>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-Fy6S3B9q64WdZWQUiU+q4/2Lc9npb8tCaSX9FK7E8HnRr0Jz8D6OP9dO5Vg3Q9ct" crossorigin="anonymous"></script>

</head>
<body>
${cursor}
</body>
</html>


==============================
< kr.co.member.service 에 MemberService 인터페이스 자동 생성하기 >
package kr.co.member.service;

import kr.co.member.domain.MemberDTO;

public interface MemberService {

	void insert(MemberDTO dto);

}




==============================
< MemberService 인터페이스에 insert 자동 생성 >  
package kr.co.member.service;

import kr.co.member.domain.MemberDTO;

public interface MemberService {

	void insert(MemberDTO dto);

}


==============================
< kr.co.member.service 에 MemberServiceImpl 클래스 생성하기 >
package kr.co.member.service;

import javax.inject.Inject;

import org.springframework.stereotype.Service;

import kr.co.member.domain.MemberDTO;
import kr.co.member.repository.MemberDAO;

@Service
public class MemberServiceImpl implements MemberService {
	
	@Inject
	private MemberDAO mDao;
	
	@Override
	public void insert(MemberDTO dto) {
		mDao.insert(dto);
		
	}

}



==============================
< root-context.xml에 코드 추가하기 >
<context:component-scan base-package="kr.co.member.service"></context:component-scan>



==============================
< kr.co.member.repository 에 MemberDAO 인터페이스 자동 생성하기 >
package kr.co.member.repository;

import kr.co.member.domain.MemberDTO;

public interface MemberDAO {

	void insert(MemberDTO dto);

}



==============================
< MemberDAO 인터페이스에 insert 자동 생성 >
package kr.co.member.repository;

import kr.co.member.domain.MemberDTO;

public interface MemberDAO {

	void insert(MemberDTO dto);

}


==============================
< kr.co.member.repository 에 MemberDAOImpl 클래스 생성하기 >
package kr.co.member.repository;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import kr.co.member.domain.MemberDTO;

@ Repository
public class MemberDAOImpl implements MemberDAO {
	
	@Autowired
	private SqlSession session;
	private final String NS = "kr.co.member";
	// NS -> namespace
	
	@Override
	public void insert(MemberDTO dto) {
		session.insert(NS+".insert", dto);
		
	}
	
}



==============================
< mappers 에 memberMapper xml파일 생성 >
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="kr.co.member">
	<insert id="insert">
		INSERT INTO tbl_member (id, pw, name, birth, address, email)
		VALUES
		(#{id}, #{pw}, #{name}, #{birth}, #{address}, #{email})  -> MemberDTO에 들어가는 변수명을 넣어야한다.
	</insert> 
</mapper>



==============================
< kr.co.member.controller에 MemberController 가기 >  --- 맨 위쪽 처음 시작하는 코드랑 같은데  
package kr.co.member.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import kr.co.member.domain.MemberDTO;
import kr.co.member.service.MemberService;

@Controller
@RequestMapping("/member")
public class MemberController {
	
	@Autowired
	private MemberService mService;
	// MemberService 인터페이스로 만들어야한다.
	
	@RequestMapping(value = "/insert", method = RequestMethod.POST)
	public String insert(MemberDTO dto) {
		// 입력받은걸 불러와야하는데(getparamter) spring에서는 그럴 필요가 없으며
		// MemberDTO dto 입력만 해주면 된다.
		
		mService.insert(dto);
				
		return "redirect:/member/read/"+dto.getId();
		// /member/read/m001 이런식으로 넘어감		
	}
	
	@RequestMapping(value = "/insert", method = RequestMethod.GET)
	// GET방식이기 때문에 일반적으로 ui를 넣지 않는다. 
	public String insert() {
		
		
		return "member/insert";  
		// servlet-context에서 설정을 해놔서 앞뒤 경로가 저절로 생긴다.
		//<beans:property name="prefix" value="/WEB-INF/views/" />
		//<beans:property name="suffix" value=".jsp" />
	}
}







