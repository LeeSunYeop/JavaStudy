List<T> list = new ArrayList<T>( );
- add( ): --- 데이터를 추가할 때
list.add( );

- size( ); --- 반복문 돌릴 때 사용. 저장된 데이터 크기
int size = list.size( );

- get( ); --- 저장된 데이터 가져오기
T a = listget(idx);

- remove( ); --- 게임에서 많이 사용됨. 저장된 데이터 삭제할 때
list.remove(인덱스번호); -- 연속해서 삭제하고 싶으면 맨 나중 인덱스번호부터 삭제한다.
list.remove(new T( ));

- clear( );  --- 다 삭제기능
list.clear( );

======================
Set
- 중복을 허용하지 않는다.
- 출력의 순서가 없다.
- add( )
- iterator( )를 이용해서 Iterator타입으로 변환 후
while문을 이용해서 요솟값을 가져옴.
- remove(Object)




< SetEx1 프로젝트 생성 >
< com.naver 패키지에 MemberDTO 클래스 생성 >
package com.naver;

import java.io.Serializable;
import java.util.Objects;

public class MemberDTO implements Serializable, Comparable<MemberDTO>{ // Comparable인터페이스임

	private static final long serialVersionUID = 1L;
	
	private int id;
	private String name;
	
	public MemberDTO() {
		// TODO Auto-generated constructor stub
	}

	public MemberDTO(int id, String name) {
		super();
		this.id = id;
		this.name = name;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	@Override
	public int hashCode() {
		return Objects.hash(id, name);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MemberDTO other = (MemberDTO) obj;
		return id == other.id && Objects.equals(name, other.name);
	}

	@Override
	public String toString() {
		return "MemberDTO [id=" + id + ", name=" + name + "]";
	}

//	@Override
//	public int compareTo(MemberDTO dto) {
//		// TODO Auto-generated method stub
//		return this.id - dto.getId();
//		//return (this.id - dto.getId())* (-1); 이렇게 짜면 id값이 큰값부터 출력된다
//	}
	
	@Override
	public int compareTo(MemberDTO dto) {
		// TODO Auto-generated method stub
		return this.name.compareTo(dto.getName()); // 가나다 순으로 출력이 됨 
		//return (this.name.compareTo(dto.getName()))* (-1); 이렇게 짜면 다나가 순으로 출력이 됨 
	}

======================
< com.naver 패키지에 Dog 클래스 생성 >
package com.naver;

public class Dog {
	
	private MemberDTO dto;
	
	public Dog() {
		// TODO Auto-generated constructor stub
	}

	public Dog(MemberDTO dto) {
		super();
		this.dto = dto;
	}

	public MemberDTO getDto() {
		return dto;
	}

	public void setDto(MemberDTO dto) {
		this.dto = dto;
	}	
	
}

======================
< net.daum 패키지에 Test 클래스 생성 >
package net.daum;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.Set;

import com.naver.MemberDTO;

public class Test {
	
	public void y1() {
		// Set을 학습하려면, Set을 구현하고 있는 자식클래스를 알아야 합니다
		// Set을 100% 구현한 클래스는 무엇인가요?  HashSet
		// Set 객체를 set1 변수명으로 생성해 주세요
		Set<Boolean> set1 = new HashSet<Boolean>(); 
		
		// 변수명 set2, generic Type: 4L, 5L 6L
		Set<Long> set2 = new HashSet<Long>();
		
		// 변수명 set3, generic Type: MemberDTO
		Set<MemberDTO> set3 = new HashSet<MemberDTO>();
		
		// 변수명 set4, generic Type: String
		Set<String> set4 = new HashSet<String>();
		
	}
	
	public void y2() {
		// Set, generic Type: Double, 변수명 set1
		Set<Double> set1 = new HashSet<Double>();
		
		set1.add(new Double(3.14));
		set1.add(9.8);
		set1.add(9.8);
		set1.add(9.8);
		set1.add(9.8);
		set1.add(9.8);
		set1.add(9.8);
		set1.add(9.8);
		set1.add(9.8);
		set1.add(new Double(9.8));
		
		int size = set1.size();
		System.out.println(size);  // 2
		
		System.out.println(set1);  // [3.14, 9.8] 나옴 중복은 안됨..
		
		// set1.get(); get이란 메서드가 없다
		
		// set1에 들어 있는 요소값을 전부 출력하세요
		// 2가지 방법 다 이용하세요
		Iterator<Double> it = set1.iterator();
		List<Double> list = new ArrayList<>();
		
		while (it.hasNext()) {
			
			Double val = it.next();
			list.add(val);
		
		}
		
		List<Double> list2 = new ArrayList<>(set1);
		System.out.println(set1);  // [3.14, 9.8]   2가지 방법으로 작성이 가능하다.
		System.out.println(list2);  // [3.14, 9.8]
		
		List<Double> list3 = new ArrayList<>(set1);
		
		Collections.sort(list3);
		System.out.println(list3);
		
	}
	
	public void y3() {
		// Set, MemberDTO, set1
		Set<MemberDTO> set1 = new HashSet<MemberDTO>();
		
		set1.add(new MemberDTO(1, "kim"));
		set1.add(new MemberDTO(2, "lee"));
		set1.add(new MemberDTO(3, "park"));
		set1.add(new MemberDTO(1, "lee"));
		
		System.out.println(set1.size());  // 3나옴.. 중복되서 3나옴(id가 같으면 같은 객체로 인식됨)
		System.out.println(set1);  // [kim, lee, park] 나옴
		
		Iterator<MemberDTO> it = set1.iterator();
		List<MemberDTO> list = new ArrayList<>();
		
		while (it.hasNext()) {
			
			MemberDTO dto = it.next();
			list.add(dto);
			
			System.out.println(dto.getId() + " : " + dto.getName());
			
		}		
		
		List<MemberDTO> list2 = new ArrayList<MemberDTO>(set1);
		Collections.sort(list2);
		System.out.println(list2);
		
	}
	
	public void y4() {
		Set<String> set1 = new HashSet<String>();
		
		set1.add("hello");
		set1.add("world");
		set1.add("good");
		set1.add("morning");
		set1.add("HELLO");
		set1.add("Hello");
		set1.add("hello");
		
		System.out.println(set1.size());  // 6 중복되서..
		System.out.println(set1);  // [world, Hello, HELLO, hello, good, morning]
		
		
		Iterator<String> it = set1.iterator();
		//List<String> list = new ArrayList<>();
				
		while (it.hasNext()) { // it 뒤에 값이 있습니까? 라는 의미 
				// 값이 있으면 true가 밑에 코드가 실행된다.
			String val = it.next();
			//list.add(val);
			System.out.println(val);
			//world
			//Hello
			//HELLO
			//hello
			//good
			//morning 나옴
		}
		
		List<String> list = new ArrayList<>(set1);
		System.out.println(list);
		
		List<String> list2 = new ArrayList<>(set1);
		Collections.sort(list2);
		System.out.println(list2);
		
			
	}
	
	public void y5() {
		Random rnd = new Random();
		
		//int num = rnd.nextInt(45);  // 0부터 44까지 랜덤으로 숫자를 정해준다.		
		//System.out.println(num);
		
		// set을 이용해서 로또번호 6개 출력하기
		// 중복되면 안됨. set
		// int num = rnd.nextInt(45) + 1; // 1부터 45까지 랜덤으로 숫자나옴
		Set<Integer> set1 = new HashSet<Integer>();
		
		while (set1.size() < 6) {
			int num = rnd.nextInt(45) + 1;
			set1.add(num);
			
		}
		
		System.out.println(set1); // [32, 16, 35, 25, 27, 12]
		
		Iterator<Integer> it = set1.iterator();
		List<Integer> list = new ArrayList<Integer>();
		
		while (it.hasNext()) {
			Integer val = it.next();
			list.add(val);		
		}
		
		Collections.sort(list); // 번호순으로 나열해줌
		System.out.println(list); // [12, 16, 25, 27, 32, 35]
	}

}



======================
< dwitt 패키지에 MainEx 클래스 생성 >
package kr.co.dwitt;

import net.daum.Test;

public class MainEx {

	public static void main(String[] args) {
		
		Test t1 = new Test();
		//t1.y2();
		
		//t1.y3();
		//t1.y4();
		t1.y5();

	}

}



=============================
Map
다른 프로그래밍언어도 한번에 두개의 값을 넣게 되어 있는 경우가 있습니다.
이럴 때,
메서드의 이름에 put~라는 접두사가 들어가는 경우가 많습니다

Map:
- 인덱스의 자료형을 개발자가 직접 지정하게 함.
 그리고 인덱스라 하지 않고 Key라고 함
 인덱스와 매칭되는 값을 입력함.

- Key는 중복이 되면 안 됨.
만약 Key가 중복되면, Value가 수정됨.

Key는 Set으로 만들어져 있음.

map 객체를 sysout하면 { } 안에 key=value 형태로 데이터가 입력되어 있음


< MapEx1 프로젝트 생성 >
< com.naver 패키지에 MemberDTO 클래스 생성 >
package com.naver;

import java.io.Serializable;
import java.util.Objects;

public class MemberDTO implements Serializable, Comparable<MemberDTO> {

	private static final long serialVersionUID = 1L;
	
	private int id;
	private String name;
	
	public MemberDTO() {
		// TODO Auto-generated constructor stub
	}

	public MemberDTO(int id, String name) {
		super();
		this.id = id;
		this.name = name;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	

	@Override
	public int hashCode() {
		return Objects.hash(id);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MemberDTO other = (MemberDTO) obj;
		return id == other.id;
	}

	@Override
	public String toString() {
		return "MemberDTO [id=" + id + ", name=" + name + "]";
	}

	@Override
	public int compareTo(MemberDTO dto) {
		// TODO Auto-generated method stub
		return this.id - getId();
	}

}

===========================
< com.naver 패키지에 Dog 클래스 생성 >
package com.naver;

public class Dog {
	
	private MemberDTO dto;
	
	public Dog() {
		// TODO Auto-generated constructor stub
	}

	public Dog(MemberDTO dto) {
		super();
		this.dto = dto;
	}

	public MemberDTO getDto() {
		return dto;
	}

	public void setDto(MemberDTO dto) {
		this.dto = dto;
	}

}


===========================
< net.daum 패키지에 TestMap 클래스 생성 >
package net.daum;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.naver.MemberDTO;

public class TestMap {
	
	public void h1() {
		// Map학습..
		// HashMap
		// Map, map1, key: Integer, Value: String
		Map<Integer, String> map1 = new HashMap<Integer, String>();
		
		// map2, key: String, Value: String
		Map<String, String> map2 = new HashMap<String, String>();
		
		// map3, key: list<Integer>, value: String
		Map<List<Integer>, String> map3 = new HashMap<List<Integer>, String>();
		
		// map4. key: map<String, String>, value: List<Integer>
		Map<Map<String, String>, List<Integer>> map4 = new HashMap<Map<String, String>, List<Integer>>();
		
		// map5, key :String, value: List<MemberDTO> --- 실무에서 많이 쓰는 형태
		Map<String, List<MemberDTO>> map5 = new HashMap<String, List<MemberDTO>>();
		
	}
	
	public void h2() {
		// map1, K: 3.1F, 4.8F, v: 1L, 2L, 5L
		Map<Float, Long> map1 = new HashMap<Float, Long>();
		map1.put(3.14F, 100L);
		map1.put(9.8F, 200L);
		map1.put(4.27F, 300L);
		map1.put(2.71F, 400L);
		map1.put(1.44F, 500L);
		map1.put(1.73F, 600L);
		map1.put(2.0F, 700L);
		map1.put(2.5F, 700L);
		map1.put(3.0F, 100L);
		map1.put(3.14F, 314L);
		
		System.out.println(map1.size());  // 9
		System.out.println(map1);
		// {2.0=700, 2.5=700, 3.0=100, 9.8=200, 1.44=500, 2.71=400, 1.73=600, 3.14=314, 4.27=300}
		// 원래 3.14F=100L 먼저 나오다가 나중에 3.14F=314L 으로 수정되어 출력됨
		
		Long val = map1.get(1.44F);
		System.out.println(val);
		
		val = map1.get(3.0F);
		System.out.println(val);
		
		Set<Float> set1 = map1.keySet();
		
		
//		List<Float> list = new ArrayList<Float>();
//		for(int i=0; i<list.size(); i++) {
//			float key = list.get(i);
//			val = map1.get(key);
//			System.out.println(val);
//		}
		
		Iterator<Float> it = set1.iterator();
		while (it.hasNext()) {
			Float key = it.next();
			val = map1.get(key);
			System.out.println(val);
		}		
	}
	
	public void h3() {
		// map1, K: "hello", "good", V: 1, 2, 4
		Map<String, Integer> map1 = new HashMap<String, Integer>();
		
		map1.put("one", 1);
		map1.put("two", 2);
		map1.put("three", 3);
		map1.put("four", 4);
		map1.put("one", 100);
		
		int size = map1.size(); 
		System.out.println(size);  // 4
		System.out.println(map1); // {four=4, one=100, two=2, three=3} 
		                          // {key=value, key=value, key=value}
		
		int num =  map1.get("one");
		System.out.println(num);
		
		// map1 요소 중 키가 three인 것의 값은?
		num = map1.get("three");
		System.out.println(num);
		
		
		
		Set<String> set1 = map1.keySet();
		
//		List<String> list = new ArrayList<String>(set1);
//		for(int i=0; i<list.size(); i++) {
//			String key =list.get(i);
//			int val = map1.get(key);
//			System.out.println(val);
//		}
				
		Iterator<String> it = set1.iterator(); // 회사가면 이코드를 많이 쓴다
		while (it.hasNext()) {
			String key = it.next();
			int val = map1.get(key);
			System.out.println(val);
			
		}
		
	}
	
	public void h4() {
		// 각자가 자신이 설계가 map 객체 만들어 보고
		// map에 값을 입력하고
		// map 들어 있는 요소들의 수를 출력하고
		// map에 들어 있는 특정 key에 해당하는 val를 출력
		// map에 들어 있는 전체 val 출력
		
		// k: String, V: Integer
		Map<String, Integer> map1 = new HashMap<String, Integer>();
		
		map1.put("하하", 10);
		map1.put("허허", 20);
		map1.put("호호", 30);
		map1.put("후후", 40);
		map1.put("히히", 50);
		
		//int size = map1.size();
		System.out.println(map1.size());
		
		//int val = map1.get("히히");
		System.out.println(map1.get("히히"));
		
		Set<String> set1 = map1.keySet();
		
		Iterator<String> it = set1.iterator();
		while (it.hasNext()) {
			String key = it.next();
			int val = map1.get(key);
			System.out.println(key + " : " + val);
			
		}
		
		List<String> list = new ArrayList<String>(set1);
		for(int i=0; i<list.size(); i++) {
			String key = list.get(i);
			int val = map1.get(key);
			System.out.println(val + " : " + key);
		}
		
	}
	
	public void h5() {
		Map<String, List<MemberDTO>> map1 = new HashMap<String, List<MemberDTO>>();
		
		List<MemberDTO> list1 = new ArrayList<>();
		list1.add(new MemberDTO(1, "kim"));
		list1.add(new MemberDTO(2, "lee"));
		list1.add(new MemberDTO(3, "park"));
		
		List<MemberDTO> list2 = new ArrayList<MemberDTO>();
		list2.add(new MemberDTO(1, "김"));
		list2.add(new MemberDTO(2, "박"));
		
		List<MemberDTO> list3 = new ArrayList<MemberDTO>();
		list3.add(new MemberDTO(100, "마이클"));
		
		map1.put("대한민국", list1);
		map1.put("북한", list2);
		map1.put("미국", list3);
		
		List<MemberDTO> list_north = map1.get("북한");
		MemberDTO dto = list_north.get(0);
		System.out.println(dto.getId());    // 1
		System.out.println(dto.getName());  // 김
		
		// map1에 있는 value들의 최종요소값의 id와 name을 출력하세요
		Set<String> set1 = map1.keySet();
		
		List<String> list = new ArrayList<String>(set1);
		
		for(int i=0; i<list.size(); i++) {
			String key = list.get(i);
			
//			List<MemberDTO> list_m = map1.get(key);
//			for(int j=0; j<list_m.size(); j++) {
//				dto = list_m.get(j);
//				System.out.println(dto.getId());
//				System.out.println(dto.getName());
//			}  주석으로 친 코드가 밑에 있는 코드로 다시 짜여져 간결하게 할 수 있다.
			printIdNName(map1, key);

		}
	
	}
	
	private void printIdNName(Map<String, List<MemberDTO>> map1, String key) {
		List<MemberDTO> list_m = map1.get(key);
		for(int j=0; j<list_m.size(); j++) {
			MemberDTO dto = list_m.get(j);
			System.out.println(dto.getId() + " : " + dto.getName());
//			100 : 마이클
//			1 : kim
//			2 : lee
//			3 : park
//			1 : 김
//			2 : 박

		}
		
	}

}

======================
< dwitt 패키지에 MainEx 클래스 생성 >
package kr.co.dwitt;

import net.daum.TestMap;

public class MainEx {

	public static void main(String[] args) {
		
		TestMap tm = new TestMap();
		//tm.h2();
		//tm.h3();
		tm.h4();
	}

}




























