String 클래스 학습
- 책을 통해 학습하면, 그냥 엄청나게 나오는 클래스
- 참조자료형을 이용해서 클래스를 생성해야 하는데
 무조건 String 클래스만 사용하는 경우가 많이 보임.
==> 그래서 저는 꽁꽁 감춰뒀다가 가르칩니다.

< TestEx11 프로젝트 생성 >
< com.naver 패키지에 Frog 클래스 생성 > 
package com.naver;

public class Frog {
	
	public void r1() {
		// string 클래스의 명시적 객체 생성법
		String str = new String("hello world");
		System.out.println(str);
	}
	
	public void r2() {
		// string 클래스의 암시적(묵시적) 객체 생성법
		String str = "id is teacheryo";
		System.out.println(str);
	}
	
	public void r3() {
		String str1 = new String("hi");
		String str2 = "hi";
		
		System.out.println(str1);
		System.out.println(str2);
		
		System.out.println(str1 == str2);  // 같은 객체냐? false로 나옴(저장공간이 다르다)
		System.out.println(str1.equals(str2)); // hi 같냐? true로 나옴(문자열이 같다) - 동등성 비교
		
	}
	
	public void r4() {
		String a = "hi";
		String b = "hi";
		String c = "Hi";
		String d = new String("hi");
		
		System.out.println(a == b); // true 나옴(저장공간이 같다) - 동일성 비교
		System.out.println(a == c); // false 나옴(저장공간이 다르다) 
	}
	
	public void r5() {
		// String 클래스의 변하지 않는 성격(불변적 성격)
		String a = "hi";
		a = "good";   // hi라는 문자열이 사라지는 것이 아니라 메모리에 계속 저장되어있다
	}
	
	public void r6() {
		// StringBuild
		// StringBuffer클래스를 사용한다
		
		StringBuffer sb = new StringBuffer();
		sb.append("안녕");
		sb.append("하세요");
		sb.append("!");
		sb.append("저는");
		sb.append("엽이");
		sb.append("입니다");
		String str = sb.toString();
		System.out.println(str);  // sb.toString() 이 생략되어 있다
		// 또는 System.out.println(sb);  // sb.toString() 이 생략되어 있다
	}

	public void r7(String msg) {
		// msg가 null이면 return
		if(msg == null) {
			System.out.println("::::::::");
			return;
		}
		// 문자열로 된 문자를 문자로 변경할 때
		char c =  msg.charAt(0);
		System.out.println(c);
		// frog1.r7(null);  값이 null 입력해서 :::::::: 나옴
		// frog1.r7("hello"); 출력 h 나옴
	}
	
	public void r8(String msg) {
		if(msg == null) {
			return;
		}
		
		int len = msg.length();
		System.out.println(len);
		// frog1.r8("hello");  출력 5 나옴		
	}
	
	public void r9(String msg) {
		// "         hello world        "  좌우공백 제거하기
		if(msg != null) {
			String str = msg.trim();
			System.out.println(str);
			// frog1.r9("          hi world        ");  
			// 출력 좌우공백 제거되서 hi world 나옴
		}
	}
	
	public void r10(String msg) {
		// msg가 갖고 있는 substring()메서드 호출
		// substring() 문자열 자라내기 이다		
		// msg.substring(3);
		// frog1.r10(null); 하면 출력에 객체가 없는데 객체를 호출한다고 에러메시지 나옴
		// 그래서 밑에 있는 코드처럼 짜는거다
	}
	
	public void r10_1(String msg) {
		
		if(msg == null) {
			return;
		}
		
		try {
			msg.substring(3); 
		} catch (Exception e) {
			// TODO: handle exception
			// e.printStackTrace();  // 에러가 발생해도 출력하겠다는 코드임
			System.out.println("글자는 "+ msg.length()+" 자입니다");
			
			String str = msg.substring(0);
			System.out.println(str);			
		} 
	}
	
	public void r11(String msg) {
		if(msg == null) {
			return;
		}
		
		String str = msg.substring(3, 5);  // 3인곳부터 5인곳까지 잘라내겠다라는 의미
		System.out.println(str);
		// frog1.r11("01234567");  출력 34 나옴		
	}
	
	// 외부로부터 문자열과 그 문자열을 자를 범위에 관한 정보를 입력 받은 후
	// 잘라내기한 문자열을 반환하는 기능
	public String r12(String msg, int begin, int stop) {
		if(msg == null) {
			return "";
		}
		
		String str = msg.substring(begin, stop);
		return str;
		
		// MainEx 가서
		// String msg = frog1.r12("01234567", 1, 4);
		// System.out.println(msg);  출력 123 나옴
	}
	
	public void r13() {
		String msg = "hello world";
		
		String str = msg.replace('h', 't');
		System.out.println(str);  // h를 t로 바꾸겠다라는 의미
		// frog1.r13();  출력 tello world
	}
	
	public void r14() {
		String msg = "hello world";
		String str = msg.replace("ll", "rr");
		System.out.println(str);
		// frog1.r14();   출력 herro worrd		
	}
	
	public void r15() {
		String msg = "hello world";
		String str = msg.replace('l', 'r');
		System.out.println(str);
		// frog1.r15(); 출력 herro worrd   l 이 전부다 r로 바뀜
	}
	
	public void r16() {
		String msg = "hello world";
		msg.endsWith(".jpg");  // 확장자가 jpg 냐 라는 의미
		msg.contains("h");
		msg.startsWith("h"); // h로 시작했냐?
		int idx = msg.indexOf('h'); // 'h' 0반환해준다
		msg.startsWith("l"); // 2를 반환해준다
		String str = msg.toUpperCase();   // 대문자로 만들어준다
		String str2 = msg.toLowerCase();  // 소문자로 만들어준다
		System.out.println(str);
		System.out.println(str2);
		
	}

	public void r17() {
		String msg = "id#pw#grade#point";
		
		String[] arr = msg.split("#");
		
		for(int i=0; i<arr.length; i++) {
			String token = arr[i];
			System.out.println(token);
			// id  
			// pw
			// grade
			// point
		}
	}
	
	public void r18() {
		String msg = "id#pw##grade#point";
		
		String[] arr = msg.split("#");
		
		for(int i=0; i<arr.length; i++) {
			String token = arr[i];
			System.out.println(token);
			//id
			//pw
			//
			//grade
			//point 중간에 한칸 띄고 이렇게 나옴 
		}
	}
	
	public void r19() {
		String msg = "id#pw##grade#point";
		StringTokenizer st = new StringTokenizer(msg, "#");
		// StringTokenizer 핵심 포인트임
		
		String[] arr = new String[st.countTokens()];
		int i = 0;
		
		while(st.hasMoreTokens()) {
			
			String token = st.nextToken();
			System.out.println(token);
			arr[i] = token;
			
			++i;
		}
	}
	
	public void r20() {
		String msg = "id#pw##grade#point";
		StringTokenizer st = new StringTokenizer(msg, "#");
		
		String[] arr = new String[st.countTokens()];
		int i = 0;
		
		while(st.hasMoreTokens()) {
			
			String token = st.nextToken();
			System.out.println(token);
			arr[i++] = token;						
		}
	}
	
	public void r20_1() {
		String msg = "id#pw##grade#point";
		StringTokenizer st = new StringTokenizer(msg, "#");
		
		List<String> list = new ArrayList<String>();
		
		while(st.hasMoreTokens()) {
			
			String token = st.nextToken();
			System.out.println(token);
			
			list.add(token);
		}
	}

}


==================================
< diwtt 패키지에 MainEx 클래스 생성 > 
package kr.co.dwitt;

import com.naver.Frog;

public class MainEx {

	public static void main(String[] args) {
		// 자료형이 Frog클래스인 frog1 변수를 생성하고
		// 그 안에 있는 r1()메서드를 호출
		Frog frog1 = new Frog();
		frog1.r1();
		
		// forg1 객체가 갖고 있는 r2()메서드 호출
		frog1.r2();
		
		frog1.r3();
		
		frog1.r4();
		
		frog1.r6();
	}

}


=========================
chatrAt( )
length( )
trim( )
substring( )
replace( )


=====================
- 상속클래스
1. 중복되는 데이터는 변수로
2. 중복되는 코드는 메서드로
3. 중복되는 자원(변수/상수/메서드)는 부모클래스로
4. 부모클래스 = super클래스
5. 자식클래스 = sub클래스
6. 상속이란? 부모클래스의 자원(변수/상수/메서드, 생성자는 제외)을 자식클래스에서 사용할 수 있는 기술
7. 상속의 표현 장소는? 자식클래스의 클래스 헤더
8. 상속을 표현할 때 사용하는 키워드(예약드)는? extends
9. 상속을 사용 이유
 - 클래스간의 공통 기능을 간결하게 표현할 수 있기 때문에..
 - 자료형을 통일시키는 효과가 있으므로..
10. super?
 - super: 부모 객체
 - super( ): 부모 자료형의 디폴트 생성자
 - super(id, name): 부모 자료형의 사용자 생성자 호출

11. 자바의 최상위 부모클래스는? Object

< ExtendsEx1 프로젝트 생성 >
< net.daum 패키지에 Animal 클래스 생성 > 
package net.daum;

public class Animal {
	
	private String id;
	private String name;
	
	public Animal() {
		// TODO Auto-generated constructor stub
	}
	
	public void sleep() {
		System.out.println("잡니다");
	}
	
	public void eat() {
		System.out.println("먹습니다");
	}
	
	

	public Animal(String id, String name) {
		super();
		this.id = id;
		this.name = name;
	}
}

==========================
< com.naver 패키지에 Dog 클래스 생성 > 
package net.daum;

public class Dog extends Animal{
	
	public Dog() {
		super();  // super라는게 new Animal이라는 의미를 가지고 있다.
	}

	public Dog(String id, String name) {
		super(id, name);  // 부모클래스
		// TODO Auto-generated constructor stub
	
	
		sleep(); 
		
		eat();
	
	}	
}































































































































































































































































































