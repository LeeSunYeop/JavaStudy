기본자료형일 때와 참조자료형일 때의 동작이 다르다..

int b = 20;
int c = b;

c에 20이 입력됨
b에 20은 당연히 있음
c=30으로 대입을 해도
b에는 영향이 없음
sysout(c)-------30이 출력
sysout(b)-------20이 출력

Dog d2 = new Dog( );
Dog d3 = d2;

d3.test = "hello";로 변경을 하면,
d2의 test도 "hello"로 변경됨


1. 변수 선언 위치에 따른 변수 분류
- 멤버변수: 클래스의 필드 영역에 선언됨.   해당 클래스 + @(접근제한자=접근제어지시자)
- 매개변수: 생성자나 메서드의( ) 안에 선언됨.    해당 생성자나 메서드 전체
- 지역변수: 생성자나 메서드의 본문({ }) 안에 선언됨.   변수 선언 이후부터 }를 만날 때까지.

2. 변수 선언 방법 변경
- 멤버변수: (접근제한자) 자료형 변수명 = 자료형에 맞는 값;
              (접근제한자) 자료형 변수명;---------------실무에서 훨씬 더 많이 사용
- 매개변수: 자료형 변수명  
- 지역변수: 자료형 변수명 = 자료형에 맞는 값;

3. 변수 선언, 변수 초기화, 대입
- 변수 선언
 - 자료형 변수명;

- 변수 초기화
 - 자료형 변수명 = 자료형에 맞는 값;

- 대입
 - 이미 변수 선언이 이뤄진 후에 발생하는 코드
 - 변수명 = 자료형에 맞는 값;

TTT a = new TTT( ); --- 변수 초기화 임

boolean a; ----- 변수 선언 임

People p1; ----- 변수 선언 임

TTT = new String("hello"); ---- 대입
코드 이렇게 짜면 회사에서 쫒겨남 이해를 돕기위해 씀, 변수는 첫글자 대문자 쓰면 안됨

멤버변수의 default 값
멤버변수에 대해 변수 선언 방법
접근제한자 자료형 변수명;

public class Dog{
	private boolean a = false;     
	private char b = ' ';
	private byte c = 0;
	private short d = 0;
	private int e = 0;
	private long f = 0L;
	private float g = 0.0F;
	private double h = 0.0;

	private Member m = null;
}

참조자료형으로 변수를 만들면, 
일반적으로 변수 생성했다고 함.

참조자료형을 변수를 만들면
객체를 생성했다고 합니다

Dog d2 = new Dog( );
진짜 객체는 new Dog( );
d2는 객체라고도 하는데 가짜 객체..---레퍼런스 reference
Dog d3 = d2;  --- 변수를 선언했지만 객체 생성이 안됨(주소값만 받음)

프로그램 = 프로세스
프로세스: 프로그램임. 그런데 작업 가능하도록 램에 로딩된 프로그램을 프로세스라고 합니다

객체:
객체지향프로그래밍언어에서
현실 세계의 명사를 프로그래밍하여 주기억장치(램)에 로딩하여 프로그램에서 사용할 수 있게 한 자원


클래스:
- 객체를 설계한 자원
- 구조적: class 키워드가 들어 있는 자원

클래스의 구성 요소
- 멤버 변수: 객체의 구성 요소를 표현함....명사개념
- 생성자: 객체를 생성할 수 있게 함.  멤버변수 초기화를 함.
- 메서드: 객체의 능력(=기술=스킬)... 동사개념

참조자료형 변수명 = new 참조자료형( );
참조자료형 변수명 = new 생성자( );
Dog d1 = new Dog( );

멤버변수는 99.99% 선언만...

####
TestEx3 프로젝트 생성

Dog는 
id 숫자로 되어 있음
name 문자열로 되어 있음
을 갖고 있습니다.

int id;
String name;

Dog는 달릴 수 있습니다
Dog는 무는 능력이 있습니다
Dog는 먹을 수 있습니다
Dog는 잠잘 수 있는 능력이 있습니다
Dog는 사냥할 수 있습니다

public 반환형 메서드명(자료형1 변수명1, 자료형2 변수명2){
	return 값;
}

메서드 기본 4유형
1. 무반환 무파람
public void run( ){
	sysout("달린다");
}

######
2. 유반환 무파람
	private double first;
	private double second;
	private double result;
	
	// 유반환 무파람 메서드 학습
	
	// plus,  first + second 그 결과값을 반환하는 기능을 갖고 있습니다
	public double plus() {
		result = first + second;
		return result;
	}
######
	// 유반환 무파람 메서드, say(), "안녕하세요"를 반환합니다
	public String say() {    // 많이 사용함
		return "안녕하세요";
	}
	
	public String say2() {
		String msg = new String("안녕하세요");
		return msg;
	}
	
	public String say3() {
		return new String("안녕하세요");
	}
#######
	// 유반환 무파람 메서드 ,  callDog() 메서드는 Dog 클래스로 만들어진 변수(객체)를 반환합니다
	public Dog callDog() {
		Dog dog = new Dog();
		return dog;
	}
########
	// 유반환 무파람 메서드,  callMain() 메서드, MainEx로 만들어진 객체를 반환합니다
	public MainEx callMain() {
		MainEx mainEx = new MainEx();
		return mainEx;
	}
#######
	// 유반환 무파람 메서드 , onoff(),  반환되는 값은 false/true 중 하나 맘대로 정하세요
	public boolean onoff() {
		return true;
	}
#######
	// getFirst() 메서드를 만들어 주세요. 멤버변수 first를 반환함.
	public double getFirst() {  //getFirst-->get+첫글자대문자이면 private이 사용되고 있구나를 생각하면됨
		                    // get은 값을 가져올때 사용함
		return first;
	}
#######
	// 멤버변수 second를 반환하는 메서드를 만들어 주세요
	public double getSecond() {
		return second;
	}

#######
3. 무반환 유파람
package com.naver;

public class Cat {
	
	private int id;
	private String name;
	

	// 무반환 유파람
	public void test(boolean a) {
		if(a) {
			System.out.println("show");
		}else {
			System.out.println("no");
		}
	}
}
MainEx로 넘어가서 
	public static void main(String[] args) {
		
		Cat cat1 = new Cat();
		cat1.test(true);
}
해야 출력이 가능하다  출력 show 나옴

########
	// 무반환 유파람 메서드 학습 , test2() 메서드는 메서드 호출할 때 34와 같은 값을 입력받아서
	// 그값을 출력하는 기능을 갖고 있다.
	public void test2(int a) {
		System.out.println(a);
	}
한다음 MainEx 가서
Cat cat1 = new Cat();
cat1.test2(34);   결과는 34 나옴

##############
	// 무반환 유파람 메서드 학습 , test3() 메서드는 사람 이름을 입력 받아서 
	// 그 이름을 출력하는 기능을 갖고 있음
	public void test3(String name) {
		System.out.println(name);
	}
한다음 MainEx 가서
Cat cat2 = new Cat();
cat2.test3("철수");  결과는 철수 나옴

################
	// 무반환 유파람 메서드 학습, test4()메서드는 Calculator로 만들어진 객체를 넘겨받아서 
	// 그 객체에 있는 second값을 출력하는 기능을 갖고 있다
	public void test4(Calculator a) {
		// 호출한 메서드의 반환형이 void가 아니면 반환형을 자료형으로 하는 선언한다.
		// 초깃값은 해당 메서드가 반환하는 값
		double c = a.getSecond(); 
		System.out.println(c);
	}
한다음 MainEx 가서
Calculator c1 = new Calculator();
cat2.test4(c1);    이부분은 나중에 다시 자세하게 한다고 함

################
	// 무반환 유파람 메서드, setId()를 생성하시오  
	public void setId(int a) {  // set은 값을 수정할 때 사용함
		id = a;
	}

########
	// 무반환 유파람 메서드, name 값을 수정하는 메서드를 생성하시오
	public void setName(String b) {
		name = b;
	}

########
멤버변수가 private 접근자이면, 해당 클래스에서만 멤버변수에 접근할 수 있다.
다른 곳에서 멤버변수의 값을 가져가거나, 값을 수정하고 싶다면,
get~( ) 메서드와
set~( ) 메서드를 만들어서
사용하면 됩니다

직접 타이핑해서 만들어도 되구요.
이클립스의 기능을 이용해도 됩니다
보통 이클립스의 기능을 이용합니다.
필드 영역에 마우스 우클릭
source-Generate getters/setters를 선택하고
select all 버튼을 클릭 후
generate 버튼 클릭

###########
4. 유반환 유파람
package net.daum;

import com.naver.Cat;
import com.naver.Dog;

public class Person {

Person 클래스로 만들어진 객체는
Dog를 최대 1마리까지 갖는다
Calculator를 최대 1대까지 갖는다
Cat은 1마리 가지고 있다
그리고
숫자로 된 id 와 문자로 된 name을 갖는다
	
		private Dog dog1;
		private Calculator cal;
		private Cat cat1 = new Cat();
		private int id;
		private String name;
		
		// 유반환 유파람.
		// 유반환 무파람, 무반환 유파람을 합친거라고 생각하면된다
		public int plus(int a, int b){
			// 21억 + 21먹 = 42억 int에 들어갈 범위가 오버됨..오버플로우
			// -21억 + -21억 = -42억 언더플로우
			int result = a + b;
			
			return result;
		}

#############
		// 유반환 유파람 , plus() 함수는 외부에서 정수 1개를 입력받아서
		// 그 정수에 +3을 한 값을 반환한다.
		public int plus(int a) {
			// 오버플로우 발생할 수 있어서 이 코드는 잘못됨
			// 이해를 돕기위해서 짠것임 
			int result = a + 3;
			return  result;
		}

#############
		// 유반환 유파람 , say()함수는 이름을 입력하면, "안녕하세요, 입력한 이름"이 반환됩니다.
		// 자바에서는 문자열끼리 더하기 가능합니다
		public String say(String name) {
			String result = "안녕하세요, "+ name;
			return result;
		}

#############
		// 유반환 유파람, 메서드명 catSetIdNName(), 새로운 id(int)와 새로운 name(String) 입력받아서
		// cat1의 id와 name을 수정합니다
		// 그런 후에 cat1을 반환합니다
		public Cat catSetIdNName(int a, String b){
			cat1.setId(a);
			cat1.setName(b);
			return cat1;
		}


public
- 접근제한자 중 하나로 스코프를 결정함.
- 프로젝트 전체가 스코프

static
- 메서드 호출 방식을 결정함.
- 일반적인 메서드에서는 잘 사용하지 않음.

void
- 반환형: 반환되는 데이터의 자료형
- void: 반환되는 데이터가 없을 때 사용하는 반환형

main
- 메서드명
- 메서드 명명 규칙: 첫글자 소문자, 띄어쓰기 하지 말고 단어의 첫글자를 대문자로

( ):
- 매개변수 선언 구역
- 매개변수는 메서드의 동적인 실행을 가능하게 함.

String[ ]
- 매개변수의 자료형

args
- 매개변수의 변수명
- 메서드를 호출 할 때, 매개변수가 있으면 매개변수의 자료형에 맞는 값을 넣어줘야 함
  그 때의 값을 인수라고 하는데, 인수가 저장되는 곳이 매개변수명입니다.

###############
1. 메서드의 공식을 적으시오
구조 공식
접근제한자 반환형 메서드명(매개변수자료형 매개변수명){
	메서드 호출 시 실행할 코드
	return 값; 
}

2. 메서드의 기본 4 유형
- 무반환 무파람
- 무반환 유파람
- 유반환 무파람
- 유반환 유파람

3. 메서드의 기본 4 유형 중 메서드 본문에 동적인 데이터를 제공해주는 유형을 모두 적으시오.
- 무반환 유파람
- 유반환 유파람

4. 메서드의 구조 중 반환형의 의미는?
- 반환되는 자료형 = 반환값의 자료형

5. return new HelloWord("good", 1, false)일 때, 메서드의 반환형은?
- HelloWord
- 참조자료형 변수명 = new 참조자료형("good", 1, false);
- "good"의 자료형은? String
- 1 의 자료형은? int
- false의 자료형은? boolean

6. return new Test(1, 'c', false, new Dog( ), "kim", new Cat(1, new String("야옹이"));의 반환형은?
- Test

7. h1( 1 );   
public ? h1( ){
}
-->
public void h1(int a){
}

8. String msg = h2(1);
public ? h2( ){
}
--->
public String h2(int a){
	retrun " ";
}

9. 여러분이 암기한 무반환 무파람 메서드를 적어 주세요
- public void me1( ) {
	sysout(" ");
}

10. 여러분이 암기한 유반환 무파람 메서드를 적어 주세요
- public Dog getDog1( ) {
	return dog;
}

11. 여러분이 암기한 무반환 유파람 메서드를 적어 주세요
- public void me2(boolean a) {
	if(a){
		sysout("show");
	}else{
		sysout("no")
	}
}

12. 여러분이 암기한 유반환 유파람 메서드를 적어 주세요
- public Cat catSetIdNName(int a , string b) {
	cat1.setId(a);
	cat1.setName(b);
	return cat1;
}

13. 멤버변수의 접근제한자로써 가장 적당한 것을 적으시오
- private 자료형 변수명 ;


























































































































































































































































































































































































































































































































































































































