테이블은 cmd창에서 만듭니다
또는 이클립스의 별도의 기능으로 생성을 합니다

JDBC: CRUD

==================
create table tbl_member(id number, name varchar2(15), age number(3));
1. kr.co.domain 패키지에 MemberDTO 클래스 생성

2. kr.co.repository 패키지에 MemberDAO 클래스 생성

3. kr.co.command 패키지에 Command 인터페이스 생성
 InsertCommand, SelectCommand, SelectByldCommand, UpdateCommand, DeleteCommand, StopCommand

4. kr.co.dwitt 패키지에 main( )메서드에 회원 관리 프로그램 실행 코드 작성.

==========================
insert( ), update( ), delete( )에서 
ResultSet rs = null;
위 코드를 입력할 필요가 없음.
근데도 넣었죠..
왜 넣는지 보여줄게요
그리고 나중에 삭제할 것임.

< MMS2 프로젝트 생성 >
< kr.co.domain 패키지에 MemberDTO 클래스 생성 >
package kr.co.domain;

import java.io.Serializable;
import java.util.Objects;

public class MemberDTO implements Serializable{

	private static final long serialVersionUID = 1L;
	
	private int id;
	private String name;
	private int age;
	
	public MemberDTO() {
		// TODO Auto-generated constructor stub
	}

	public MemberDTO(int id, String name, int age) {
		super();
		this.id = id;
		this.name = name;
		this.age = age;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	@Override
	public int hashCode() {
		return Objects.hash(id);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MemberDTO other = (MemberDTO) obj;
		return id == other.id;
	}

	@Override
	public String toString() {
		return "MemberDTO [id=" + id + ", name=" + name + ", age=" + age + "]";
	}
}


================================
< kr.co.repository 패키지에 MemberDAO 클래스 생성 >
package kr.co.repository;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import kr.co.domain.MemberDTO;

public class MemberDAO {  // 테이블만큼 MemberDAO 만들어 주면 된다.
	
	private static final String DRIVER = "oracle.jdbc.driver.OracleDriver";
	private static final String URL = "jdbc:oracle:thin:@localhost:1521:xe"; //@뒤에 도메인주소가 없으면 ip주소를 넣으면 된다
	private static final String USERNAME = "dw1";
	private static final String PASSWORD = "dw1";
			
	public MemberDAO() { // 디폴트생성자
		try {
			Class.forName(MemberDAO.DRIVER);
			System.out.println("드라이버 로딩 성공");
		} catch (Exception e) {
			System.out.println("드라이버 로딩 실패");
			e.printStackTrace();
		}
	}
	
	private void closeAll(ResultSet rs, PreparedStatement pstmt, Connection conn) {
		
		if (rs != null) {
			try {
				rs.close();
			} catch (SQLException e) {					
				e.printStackTrace();
			}
		}
		
		if (pstmt != null) {
			try {
				pstmt.close();
			} catch (SQLException e) {					
				e.printStackTrace();
			}
		}
		
		if (conn != null) {
			try {
				conn.close();
			} catch (SQLException e) {					
				e.printStackTrace();
			}
		}		
	}

	
	public int insert(MemberDTO dto) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		//ResultSet rs = null;  // select 작업할때 필요함
		
		String sql = "INSERT INTO tbl_member (id, name, age) VALUES (?, ?, ?)";
												
		int result = 0; // insert, update, delete 작업할 때 필요
		
		try {
			conn = DriverManager.getConnection(
					MemberDAO.URL, // MemberDAO -> private가 되어 있기때문에 넣어 줘야한다.
					MemberDAO.USERNAME, 
					MemberDAO.PASSWORD);
			
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setInt(1, dto.getId());   // 오라클에서 인덱스는 1부터 시작함
			pstmt.setString(2, dto.getName());
			pstmt.setInt(3, dto.getAge());
			
			// pstmt.executeQuery();-> SELECT~ 로 시작할 때..
			result = pstmt.executeUpdate(); // SELECT가 아닌 걸로 시작할 때..
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			closeAll(null, pstmt, conn);
		}
				
		return result;
	}

	public List<MemberDTO> select() {
		List<MemberDTO> list = new ArrayList<MemberDTO>(); // 메서드의 클이 완성됨
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "SELECT * FROM tbl_member";
		ResultSet rs = null;
				
		try {
			conn = DriverManager.getConnection(
					MemberDAO.URL, MemberDAO.USERNAME, 
					MemberDAO.PASSWORD);
			pstmt = conn.prepareStatement(sql);
			
			rs = pstmt.executeQuery();
			
			while (rs.next()) {
				// 컬럼별칭을 입력해야함
				// 컬럼명만 있으면, 컬럼명이 컬럼별칭이 됨.
				int id = rs.getInt("id");
				String name = rs.getString("name");
				int age = rs.getInt("age");
				
				list.add(new MemberDTO(id, name, age));
			}			
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			closeAll(rs, pstmt, conn);
		}
			
		return list;
	}

	public MemberDTO selectById(int id) {	
		MemberDTO dto = null;
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "SELECT * FROM tbl_member WHERE id = ?";
		ResultSet rs = null;
		
		try {
			conn = DriverManager.getConnection(
					MemberDAO.URL, MemberDAO.USERNAME, 
					MemberDAO.PASSWORD);
			
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setInt(1, id);
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				String name = rs.getString(2);
				int age = rs.getInt(3);
				
				dto = new MemberDTO(id, name, age);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			closeAll(rs, pstmt, conn);
		}		
		
		return dto;
	}

	public int update(MemberDTO dto) {
		int result = 0;
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "UPDATE tbl_member SET name = ?, age = ? WHERE id = ?";
		//ResultSet rs = null;
		
		try {
			conn = DriverManager.getConnection(
					MemberDAO.URL, MemberDAO.USERNAME,
					MemberDAO.PASSWORD);
			
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, dto.getName());
			pstmt.setInt(2, dto.getAge());
			pstmt.setInt(3, dto.getId());
			
			result = pstmt.executeUpdate();
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			closeAll(null, pstmt, conn);
		}
				
		return result;
	}

	public int delete(MemberDTO dto) {
		int result = 0; 
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "DELETE tbl_member WHERE id = ? AND name = ?";
		//ResultSet rs = null;
		
		try {
			conn = DriverManager.getConnection(
					MemberDAO.URL, MemberDAO.USERNAME,
					MemberDAO.PASSWORD);
			
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, dto.getId());
			pstmt.setString(2, dto.getName());
			
			result = pstmt.executeUpdate();			
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			closeAll(null, pstmt, conn);
		}
				
		return result;
	}
	
}

================================
< kr.co.command 패키지에 Command 인터페이스 생성 >
package kr.co.command;

import java.util.Scanner;

public interface Command {
	
	public abstract boolean execute(Scanner sc);

}

================================
< kr.co.command 패키지에 InsertCommand 클래스 생성 >
package kr.co.command;

import java.util.Scanner;

import kr.co.domain.MemberDTO;
import kr.co.repository.MemberDAO;

public class InsertCommand implements Command {

	@Override
	public boolean execute(Scanner sc) {
		
		System.out.println("아이디를 입력하세요.");
		int id = sc.nextInt();
		sc.nextLine();
		
		System.out.println("이름을 입력하세요.");
		String name = sc.nextLine();
		
		System.out.println("나이를 입력하세요.");
		int age = sc.nextInt();
		sc.nextLine();
		
		MemberDTO dto = new MemberDTO(id, name, age);
		
		MemberDAO dao = new MemberDAO();
		int i = dao.insert(dto);
		
		if(i>0) {
			System.out.println("입력 성공");
		}else {
			System.out.println("입력 실패");
		}
		
		return true;
	}

	@Override
	public String toString() {
		
		return "입력";
	}

}


================================
< kr.co.command 패키지에 SelectCommand 클래스 생성 >
package kr.co.command;

import java.util.List;
import java.util.Scanner;

import kr.co.domain.MemberDTO;
import kr.co.repository.MemberDAO;

public class SelectCommand implements Command {

	@Override
	public boolean execute(Scanner sc) {
		
		MemberDAO dao = new MemberDAO();
		List<MemberDTO> list = dao.select();
		
		for(int i=0; i<list.size(); i++) {
			MemberDTO dto = list.get(i);
			System.out.println(dto);
		}
		
		return true;
	}

	@Override
	public String toString() {
		
		return "전체 조회";
	}

}


================================
< kr.co.command 패키지에 SelectByldCommand 클래스 생성 >
package kr.co.command;

import java.util.Scanner;

import kr.co.domain.MemberDTO;
import kr.co.repository.MemberDAO;

public class SelectByldCommand implements Command {

	@Override
	public boolean execute(Scanner sc) {
		
		System.out.println("조회할 아이디를 입력하세요.");
		int id = sc.nextInt();
		sc.nextLine();
		
		MemberDAO dao = new MemberDAO();
		MemberDTO dto = dao.selectById(id);
		
		System.out.println(dto.getId());
		System.out.println(dto.getName());
		System.out.println(dto.getAge());
		
		//System.out.println(dto);  dto에서 toString할때 id,name,age를 다 체크했으면 이렇게 써도 된다.				
		
		return true;
	}

	@Override
	public String toString() {
		
		return "아이디로 조회";
	}

}


================================
< kr.co.command 패키지에 UpdateCommand 클래스 생성 >
package kr.co.command;

import java.util.Scanner;

import kr.co.domain.MemberDTO;
import kr.co.repository.MemberDAO;

public class UpdateCommand implements Command {

	@Override
	public boolean execute(Scanner sc) {
		System.out.println("수정할 회원의 아이디를 입력하세요.");
		int id = sc.nextInt();
		sc.nextLine();
		
		MemberDAO dao = new MemberDAO();
		
		MemberDTO dto = dao.selectById(id);
		
		if(dto != null) {
			System.out.println(dto);
			
			System.out.println("이름을 입력하세요.");
			String name = sc.nextLine();
			
			System.out.println("나이를 입력하세요.");
			int age = sc.nextInt();
			sc.nextLine();
			
			dto.setName(name);
			dto.setAge(age);
			
			int result = dao.update(dto);
			if(result > 0) {
				System.out.println("수정 성공");
			}else {
				System.out.println("수정 실패");
			}
			
		} else {
			System.out.println("존재하지 않는 회원입니다.");
		}
		
		return true;
	}

	@Override
	public String toString() {
		
		return "수정";
	}

}


================================
< kr.co.command 패키지에 DeleteCommand 클래스 생성 >
package kr.co.command;

import java.util.Scanner;

import kr.co.domain.MemberDTO;
import kr.co.repository.MemberDAO;

public class DeleteCommand implements Command {

	@Override
	public boolean execute(Scanner sc) {
		System.out.println("삭제할 아이디를 입력하세요.");
		int id = sc.nextInt();
		sc.nextLine();
		
		MemberDAO dao = new MemberDAO();
		MemberDTO dto = dao.selectById(id);
		
		if (dto != null) {
			System.out.println("이름을 입력하세요");
			String name = sc.nextLine();
			
			int result = dao.delete(new MemberDTO(id, name, 0));
			
			if (result > 0) {
				System.out.println("삭제 성공");
			} else {
				System.out.println("삭제 실패");	
			}
		} else {
			System.out.println("존재하지 않는 회원입니다.");
		}
		
		
		
		return true;
	}

	@Override
	public String toString() {
		
		return "삭제";
	}

}


================================
< kr.co.command 패키지에 StopCommand 클래스 생성 >
package kr.co.command;

import java.util.Scanner;

public class StopCommand implements Command {

	@Override
	public boolean execute(Scanner sc) {
		
		return false;
	}

	@Override
	public String toString() {
		
		return "종료";
	}

}

================================
< kr.co.dwitt 패키지에 MainEx 클래스 생성 >
package kr.co.dwitt;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import kr.co.command.Command;
import kr.co.command.DeleteCommand;
import kr.co.command.InsertCommand;
import kr.co.command.SelectByldCommand;
import kr.co.command.SelectCommand;
import kr.co.command.StopCommand;
import kr.co.command.UpdateCommand;

public class MainEx {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
//		Command[] menus = {new InsertCommand(), new SelectCommand(), new SelectByldCommand(),
//				 new UpdateCommand(), new DeleteCommand(), new StopCommand()};
		
		List<Command> list = new ArrayList<Command>(); // list로 해서 만드는게 좋다
		list.add(new InsertCommand());
		list.add(new SelectCommand());
		list.add(new SelectByldCommand());
		list.add(new UpdateCommand());
		list.add(new DeleteCommand());
		list.add(new StopCommand());
				
		Command menu = null;
		
		boolean isTrue = true;
		
		while (isTrue) {
			System.out.println("메뉴를 선택하세요.");
			for(int i=0; i<list.size(); i++) {
				System.out.print(i);
				System.out.print(": ");
				System.out.print(list.get(i));
				System.out.print(", ");
				
			}
			
			System.out.println();
			
			int idx = sc.nextInt();
			sc.nextLine();
			
			menu = list.get(idx);
			isTrue = menu.execute(sc);
		}
				
		sc.close();

	}

}













































































