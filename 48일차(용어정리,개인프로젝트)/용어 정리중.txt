HTML로는 웹의 내용을 작성하고, CSS로는 웹을 디자인하며, 자바스크립트로는 웹의 동작을 구현할 수 있다.

DTO (Data Transfer Object)
Dto 란 데이터를 계층 간으로 전달하는 객체이다.

컨트롤러(Controller)
Model이 데이터를 어떻게 처리할지 알려주는 역할을 한다. 클라이언트의 요청을 받으면 해당 요청에 
대한 실제 업무를 수행하는 Model을 호출한다. 클라이언트가 보낸 데이터가 있다면, 
모델을 호출할 때 전달하기 쉽게 적절히 가공한다.

개발을 하다보면 여러 디자인 패턴을 마주하게 된다. 그 중 가장 자주 보는 디자인 패턴은 MVC 패턴일 것이다. 
MVC 패턴의 각 컴포넌트(Model, View, Controller)는 담당하는 역할이 있다. 
해당 패턴을 사용하기 앞서 어떤 컴포넌트가 무슨 역할을 수행하는지 이해하는 것이 중요하다.
이번 포스트에서는 웹 MVC 컴포넌트 역할을 정리하려 한다. 먼저 MVC가 무엇인지 알아보고, 
이어서 각 컴포넌트의 역할을 차례대로 설명한다.

MVC란?
MVC(Model-View-Controller)는 어플리케이션을 세 가지 역할로 구분한 개발 방법론이다.
사용자가 입력을 담당하는 View를 통해 요청을 보내면 해당 요청을 Controller가 받고, 
Controller는 Model을 통해 데이터를 가져오고, 해당 데이터를 바탕으로 출력을 담당하는 
View를 제어해서 사용자에게 전달한다.
MVC 패턴을 사용하면 Model과 View가 다른 컴포넌트들에 종속되지 않아 변경에 유리하다는 장점을 가질 수 있다.

모델(Model)
어플리케이션이 무엇을 할 것인지 정의한다. 내부 비즈니스 로직을 처리하기 위한 역할을 한다. 
즉, 데이터 저장소(ex. DB)와 연동하여 사용자가 입력한 데이터나 사용자에게 출력할 데이터를 다룬다.
특히, 여러 개의 데이터 변경 작업(ex. 추가, 변경, 삭제)를 하나의 작업으로 묶은 트랜잭션을 다루는 일도 한다.
Model은 다른 컴포넌트들에 대해 알지 못한다. 자기 자신이 무엇을 수행하는지만 알고 있다.

뷰(View)
최종 사용자에게 무엇을 화면(UI)로 보여준다. 화면에 무엇을 보여주기 위한 역할을 한다. 
즉, 모델이 처리한 데이터나 그 작업 결과를 가지고 사용자에게 출력할 화면을 만든다. 
만든 화면은 웹 브라우저가 출력한다.
View 역시도 다른 컴포넌트들에 대해 알지 못한다. 자기 자신이 무엇을 수행하는지만 알고 있다.

컨트롤러(Controller)
Model과 View 사이에 있는 컴포넌트이다. Model이 데이터를 어떻게 처리할지 알려주는 역할을 한다.
클라이언트의 요청을 받으면 해당 요청에 대한 실제 업무를 수행하는 Model을 호출한다. 
클라이언트가 보낸 데이터가 있다면, 모델을 호출할 때 전달하기 쉽게 적절히 가공한다.
Model이 업무 수행을 완료하면 그 결과를 가지고 화면을 생성하도록 View에 전달한다.
즉, 클라이언트의 요청에 대해 Model과 View를 결정하여 전달하는 일종의 조정자로서의 일을 한다.
Controller는 다른 컴포넌트들에 대해 알고 있다. 자기 자신 외에 Model과 View가 무엇을 수행하는지 알고 있다.




DAO란?
Data Access Object의 약어로 실질적으로 DB에 접근하여 데이터를 조회하거나 조작하는 기능을 전담하는 객체를 말한다.
DAO의 사용 이유는 효율적인 커넥션 관리와 보안성 때문이다. DAO는 저수준의 Logic과 
고급 비즈니스 Logic을 분리하고 domain logic으로부터 DB관련 mechanism을 숨기기 위해 사용한다.


Mapper인터페이스란?
Mybatis 매핑XML에 기재된 SQL을 호출하기 위한 인터페이스이다. Mybatis3.0부터 생겼다.

Mapper인터페이스를 사용하지 않을 경우
SqlSession을 등록해줘야 한다.
DAO인터페이스와 인터페이스를 구현한 DAO클래스를 생성해줘야한다.
Mapper인터페이스를 사용하지 않았을 때는 네임스페이스 + “.” + SQL ID로 지정해서 SQL을 호출해야한다.
(예를들면 sesseion.selectOne(“com.test.mapper.TimeMapper.getReplyer, bno ))
selectOne, insert, delete 등 제공하는 메소드를 사용해야 한다.
문자열로 작성하기 때문에 버그가 생길 수 있다.
IDE에서 제공하는 code assist를 사용할 수 없다.

Mapper인터페이스를 사용하는 방법
Mapper인터페이스는 개발자가 직접 작성한다.
mapper 네임스페이스는 패키지명을 포함한 인터페이스 명으로 작성한다.
SQL id는 인터페이스에 정의된 메서드명과 동일하게 작성한다


데이터 보관소
ServletContext 보관소
웹 어플리케이션이 시작~ 종료까지 유지된다.
모든 서블릿이 사용할 수 있다.
JSP에서는 application 변수를 통해 이 보관소를 참조한다.
예) 데이터베이스 connection
ServletContext sc = this.getServletContext();
sc.setAttribute("conn", conn);


HttpSession 보관소
클라이언트 최초 요청 시 생성되어 브라우저 닫을 때까지 유지된다
보통 로그인할 때, 이 보관소를 초기화하고 로그아웃하면 이 보관소에 저장된 값을 비운다
JSP에서는 session 변수를 통해 이 보관소를 참조할 수 있다
활용 예시 : 로그인
HttpSession 객체는 클라이언트 당 한 개가 생성된다
웹 브라우저로 요청이 들어오면, 그 웹 브라우저를 위한 HttpSession 객체가 있는지 검사하고, 없다면 새로 만든다
이렇게 생성된 객체는 웹 브라우저로부터 일정시간 동안 Timeout 요청이 없으면 삭제된다
HttpSession session = request.getSession();
session.setAttribute("member", member);


ServletRequest 보관소
클라이언트의 요청이 들어올 때 생성되어, 클라이언트에게 응답할 때까지 유지된다
이 보관소는 포워딩이나 인클루딩 하는 서블릿들 사이에서 값을 공유할 때 유용하다.
JSP에서는 request 변수를 통해 이 보관소를 참조할 수 있다.
@Override
    protected void doGet( HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        RequestDispatcher rd = request.getRequestDispatcher("/auth/LogInForm.jsp");

        // forward()를 호출할 때, request와 reponse를 그대로 넘겨준다!
        rd.forward(request, response);
    }


JSPContext 보관소
JSP 페이지를 실행하는 동안만 유지된다.
JSP에서는 pageContext 변수를 통해 이 보관소를 참조할 수 있다.
활용) JSP 페이지의 로컬변수와의 차이점 : 태그 핸들러가 데이터에 접근할 수 있으면 
jspContext인데 자세한 내용은 PASS


어노테이션이란?
클래스나 메서드, 변수에 @을 사용하는 것을 말합니다.

어노테이션을 사용하는 이유
어노테이션은 사전적 의미로 주석을 뜻합니다. 주석과는 역할이 다르지만, 
주석처럼 달아 특수한 의미 부여가 가능하며, 기능 주입이 가능합니다. 
어노테이션을 사용하는 가장 큰 이유는 프로그램에게 추가 정보를 제공하는 메타 데이터를 위해서 사용합니다.


<의존성 주입 용도  >
@Required 
필수 프로퍼티를 설정, 코드 내에 프로퍼티 설정 메서드에 @Required 어노테이션을 붙인다.

@Autowired
의존관계를 자동으로 설정해주는 어노테이션, Controller클래스에서 DAO나 Service에 관한 
객체들을 주입시킬 때 많이 사용.
필요한 의존 객체의 “타입"에 해당하는 빈을 찾아 주입한다.
생성자
setter
필드
위의 3가지의 경우에 Autowired를 사용할 수 있다. 그리고 Autowired는 기본값이 true이기 때문에 
의존성 주입을 할 대상을 찾지 못한다면 애플리케이션 구동에 실패한다.

@Inject 
객체의 타입을 보고 주입될 클래스를 탐색한다.
@Autowired와 차이점은 
@Autowired는 스프링에서 지원하고, @Inject은 자바에서 지원하는 어노테이션이다. 


< 컨트롤러 관련 >
@Controller
@Controller어노테이션은 MVC패턴에서 Controller클래스에 선언, 
@Component어노테이션을 써도 상관없다. 하지만 @Controller 어노테이션을 사용함으로 
@RequestMapping 등의 추가 어노테이션을 사용 가능


@RequestMapping
우리는 특정 uri로 요청을 보내면 Controller에서 어떠한 방식으로 처리할지 정의를 한다.
이때 들어온 요청을 특정 메서드와 매핑하기 위해 사용하는 것이 @RequestMapping이다.
@RequestMapping에서 가장 많이사용하는 부분은 value와 method이다. (더 많지만 여기서는 여기까지만)
value는 요청받을 url을 설정하게 된다.
method는 어떤 요청으로 받을지 정의하게 된다.(GET, POST, PUT, DELETE 등)

@RequestMapping 어노테이션은 Spring 웹 애플리케이션에서 가장 자주 사용 
http request로 들어오는 url 특정 controller 클래스나 메서드로 연결시키는 역할
controller에 class에 적용할 수 있고 특정 method에 적용 가능 


컨트롤러 : @Controller (프레젠테이션 레이어, 웹 요청과 응답을 처리함)
로직 처리 : @Service (서비스 레이어, 내부에서 자바 로직을 처리함)
외부I/O 처리 : @Repository (퍼시스턴스 레이어, DB나 파일같은 외부 I/O 작업을 처리함)



@PathVariable
: URL 경로에 변수를 넣어주는 기능 


@ResponseBody
: 자바 객체를 HTTP 요청의 body 내용으로 매핑하는 역할을 함

@RequestBody
: @RequestBody에 붙은 파라미터는 HTTP 요청의 본문 body부분이 자바 객체 그대로 전달 


@RequestParam
: 단일 HTTP 요청 파라미터를 method 파라미터에 넣어주는 어노테이션
가져올 요청 파라미터 이름을 @RequestParam 어노테이션의 기본값으로 지정해주면 된다. 


@ModelAttribute
@RequestParam과 비슷하고 
Controller 메소드의 파라미터나 리턴 값을 Model 객체와 바인딩하기 위한 어노테이션


< 데이터 접근 관련 >
@Service
: Service 레이어 클래스들에 사용되는 어노테이션, @Component어노테이션을 써도 상관없다.
@Service어노테이션을 사용함으로써 해당 클래스가 서비스 레이어 클래스라는 것을 명확히 함 

Service와 ServiceImpl
MVC패턴에서 ServiceImpl은 비지니스로직을 수행하는 역할을 말한다. 
여기서 말하는 비지니스로직이란, 기능을 구현하는 구현부이다. 
비지니스 로직을 수행하기 위해 Service는 interface파일로 ServiceImpl은 class파일로 작성한다.

Service Model의 역할
MVC패턴의 핵심은 View는 자신이 요청할 Controller만 알고 있으면 되고, 
Controller는 화면에서 넘어오는 매개변수들을 이용해 Service객체를 호출하는 역할을 한다. 
Service는 불필요하게 Http통신을 위한 순수한 자바 객체로 구성된다.
=> 즉, 자신을 어떤 컨트롤러가 호출하든 상관없이 필요한 매개변수만 준다면 
자신의 비지니스 로직을 처리할 수 있다.(모듈화를 통해 재사용성 향상)
Web기반이 아닌 native app으로 View단이 변경되어도 Service는 View에 종속적인 코드가 없기 때문에 
그대로 재사용할 수 있어야 한다. 그리고 추가적인 요청사항이 들어오면 기존 소스를 수정하는게 아니라 
기존 Service인터페이스를 구현한 다른 클래스를 구현해 그 객체를 사용하도록 한다.

인터페이스와 인터페이스 구현 클래스로 분리할 경우 장점
느슨한 결합을 유지하여 각 기능 간 의존관계를 최소화할 수 있다.
의존관계의 최소화로 인해 기능의 변화에도 최소한의 수정으로 개발할 수 있는 유연함을 가질 수 있다.
모듈화를 통해 어디서든 사용할 수 있도록 하여 재사용성을 높인다.
스프링으 IoC/DI기능을 이용한 빈 관리 기능을 사용할 수 있다.


@Repository
: DAO에 특화된 어노테이션, @Component어노테이션을 써도 상관없다. 


=============================jsp========================
<div> 태그는 HTML 문서에서 특정 영역(division)이나 구획(section)을 정의할 때 사용합니다.
<div> 요소는 여러 HTML 요소들을 하나로 묶어주어 CSS로 스타일을 변경하거나 
자바스크립트로 특정 작업을 수행하기 위한 일종의 컨테이너(container)로 자주 사용됩니다. 
또한, CSS와 함께 웹 페이지의 레이아웃(layout)을 설정하는데도 종종 사용됩니다.

<form> 태그는 사용자로부터 입력을 받을 수 있는 HTLM 입력 폼(form)을 정의할 때 사용합니다.
<form> 요소는 다음과 같은 요소들을 하나 이상 포함할 수 있습니다.
- <button>
- <fieldset>
- <input>
- <label>
- <option>
- <optgroup>
- <select>
- <textarea>



<label> 태그는 사용자 인터페이스(UI) 요소의 라벨(label)을 정의할 때 사용합니다.
<label> 요소는 for 속성을 사용하여 다른 요소와 결합할 수 있으며, 
이때 <label> 요소의 for 속성값은 결합하고자 하는 요소의 id 속성값과 같아야 합니다. 
또한, <label> 요소를 결합하고자 하는 요소 내부에 위치시키면 for 속성을 사용하지 않더라도 
해당 요소와 결합시킬 수 있습니다. 
이러한 <label> 요소는 브라우저에 의해 일반적인 텍스트로 랜더링되지만, 
사용자가 마우스로 해당 텍스트를 클릭할 경우 <label> 요소와 연결된 요소를 곧바로 선택할 수 있어 
사용자의 편의성을 높일 수 있습니다.


$(document).ready()는 문서가 준비되면 매개변수로 넣은 콜백 함수를 실행하라는 의미입니다.
jQuery 이벤트 메서드 중 하나입니다. 이 메서드는 비슷한 기능을 수행합니다. 
인터넷 익스플로러 이벤트 모델과 마찬가지로 이벤트로 여러개의 함수를 연결할 수 있습니다.

DOM은 정확히 무엇일까?
DOM(Document Object Model)은 웹 페이지에 대한 인터페이스입니다. 
기본적으로 여러 프로그램들이 페이지의 콘텐츠 및 구조, 그리고 스타일을 읽고 조작할 수 있도록 API를 제공합니다.
DOM(Document Object Model) – HTML 요소들의 구조화된 표현
CSSOM(Cascading Style Sheets Object Model) – 요소들과 연관된 스타일 정보의 구조화된 표현


preventDefault 란?
a 태그나 submit 태그는 누르게 되면 href 를 통해 이동하거나 , 창이 새로고침하여 실행됩니다.
preventDefault 를 통해 이러한 동작을 막아줄 수 있습니다.
주로 사용되는 경우는
1. a 태그를 눌렀을때도 href 링크로 이동하지 않게 할 경우
2. form 안에 submit 역할을 하는 버튼을 눌렀어도 새로 실행하지 않게 하고싶을 경우 (submit은 작동됨)


$("form").submit() 란?
별도의 전송 버튼을 이용하여 폼을 전송하고 싶을 때는 버튼을 만들고 
$("form").submit() 을 바로 호출하면 버튼을 이용한 전송도 가능하다.































