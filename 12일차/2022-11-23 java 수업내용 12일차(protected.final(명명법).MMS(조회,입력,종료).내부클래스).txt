public
protected  접근제한자

private

20. protected  접근제한자
- 기본적으로 같은 패키지까지만 접근이 가능
- 상속 관계가 성립하면, 패키지가 달라도 접근 가능

21. 명명법
- 프로젝트: 맘대로 하시면 됨.
- 패키지명: 다 소문자, 회사의 도메인을 거꾸로 배치.
- 클래스명: 첫 글자 대문자, 띄어쓰기 하지 말고 띄어쓰는 글자의 첫 글자를 대문자로
- 인터페이스: 클래스 명명법과 동일
- 메서드: 첫 글자는 소문자, 띄어쓰기 하지 말고 띄어쓰는 글자의 첫 글자를 대문자로
- 변수명: 메서드와 같음.
- 상수: 다 대문자, 띄어쓰기 하지 말고 띄어쓰는 글자의 앞에 _를 붙임.
- enum: 상수와 같음.

22. final
- 변수에 final을 붙였더니 상수가 되었음.
- 메서드에 final을 붙였더니 자식클래스에서 절대로 오버라이딩하면 안 되는 메서드가 되었음
- 클래스에 final을 붙였더니 자식클래스를 만들지 못 하는 클래스가 되었음.
**** 프로그래밍에서는 비슷한 단어라도 의미가 완전히 다르다 *****
**** finally 과 final은 기능이 완전히 다름. ******

23. 자바의 상속은 단일 상속을 원칙으로 합니다.
- 자바의 클래스는 단일 상속만 합니다.
- 자바의 인터페이스는 다중상속이 가능합니다.
pulic class Dog extends Animal {  --- 클래스는 단일상속만 가능
}

24. 예전에는(스프링 프레임워크가 도입 되기 전) 상속와 인터페이스는 같은 등급의 기술로 인식됐었습니다.
인터페이스: 매개자...
- 구조상 정의 : public static 상수나 public 추상메서드만을 갖고 있는 파일
- 다형성 적용됨.
- 다중 상속 지원됨
- 오버라이딩 지원됨
- 클래스가 인터페이스를 구현하고 싶을 때에는 implements 키워드 다음에 인터페이스명을 적음
- 인터페이스가 인터페이스를 상속할 때는 extends 키워드 다음에 인터페이스명을 적음

25. extends, implements 적용 시기?
- 같은 종류의 파일을 상속할 때: extends
-> 클래스가 클래스를 상속할 때
-> 인터페이스가 인터페이스를 상속할 때

- 다른 종류의 파일을 상속할 때: implements 
-> 클래스가 인터페이스를 구현할 때
-> 인터페이스가 클래스를 구현할 때(문법상 있을 수 없지만, 만약 가능했다면 implements를 쓸 것임)

26. 인터페이스는 언제 사용하나?
- 코드를 간결하게 할 때
- 자료형을 통일할 때
- 여러 기능을 통합하여 하나의 프로젝트로 만들 때
- 게임의 캐릭터에 대해서 중요한 값들을 정의할 때
- 병렬작업이 가능해짐

27. MMS 코드 암기하시고, 한 줄 한 줄 해석할 수 있을 때까지 공부하세요.



< FinalEx1 프로젝트 생성 >
< com.naver 패키지에 MemberDTO 클래스 생성 >
package com.naver;

import java.io.Serializable;
import java.util.Objects;

public class MemberDTO extends Object implements Serializable{

	private static final long serialVersionUID = 1L;
	// final 붙으면 상수가 됨.. 항상 같은값이란 의미
	// 상수는 값을 수정할 수 없다.
	
	private int id;
	private String name;
	
	public MemberDTO() {}

	public MemberDTO(int id, String name) {
		super();
		this.id = id;
		this.name = name;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	@Override
	public int hashCode() {
		return Objects.hash(id);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MemberDTO other = (MemberDTO) obj;
		return id == other.id;
	}

	@Override
	public String toString() {
		return "MemberDTO [id=" + id + ", name=" + name + "]";
	}

}

=============================
< com.naver 패키지에 Car 클래스 생성 >
package com.naver;

public class Car {
	
	private String model;
	
	// 상수의 명명법: 다 대문자, 띄어쓰기하지 말고 띄어쓰는 글자 앞에 _를 넣으세요
	
	// private final String COMPANY_NAME;  // 값을 설정을 안해서 에러가 뜸
	private final String COMPANY_NAME = "hyunDai";
	
	public Car() {
		model = "sonata";  // 초기화
		
		model = "genesis"; // 대입
		
		// company = "yyy"; 상수이기때문에 값을 대입이 안된다고 오류가 뜬다
		
	}

	public Car(String model) {
		super();
		this.model = model;
	}

	public String getModel() {
		return model;
	}

	public void setModel(String model) {
		this.model = model;
	}

	public String getCOMPANY_NAME() {
		return COMPANY_NAME;
	}

	
}

===============================
< daum 패키지에 Dog 클래스 생성 >
package net.daum;

public class Dog extends Animal{

	@Override
	public void eat() {
		// TODO Auto-generated method stub
		System.out.println("먹는다.");
		
	}
	
//	public final void run() {
//		System.out.println("달린다");
//	}  오류가 뜨며 오버라이딩하고 싶으면 final를 제거해 라는 메시지가 뜬다
	

}

===============================
< daum 패키지에 Animal 클래스 생성 >
package net.daum;

public abstract class Animal {
	
	public void sleep() {
		System.out.println("잡니다.");
	}
	
	public abstract void eat(); // 반드시 오버라이딩해야함
	
	public final void run() {  // 메서드에 final이 붙으면 자식클래스에서는 절대로 오버라이딩을 하면 안됨
		System.out.println("달립니다.");
	}

}

===============================
< daum 패키지에 Unit 클래스 생성 >
package net.daum;

public final class Unit {
	
	public void attack() {
		System.out.println("공격해.");
	}

}

===============================
< daum 패키지에 Tank 클래스 생성 >
package net.daum;

// public class Tank extends Unit{ 
// 부모클래스에 final을 붙이면 자식클래스가 될수가 없다고 오류메시지가 뜬다
//}



===============================
< ImplementsEx1 프로젝트 생성 >
< com.naver 패키지에 Camera 인터페이스 생성 >
package com.naver;

public interface Camera {
	
	public abstract void take();

}

================================
< com.naver 패키지에 PC 인터페이스 생성 >
package com.naver;

public interface PC {
	public static final int PRICE = 1000000;
	// int PRICE = 1000000; 실무에서는 이렇게 씀
	
	public static final int SONATA = 30000000;
	public static final int RAM = 32;
	public static final int HDD = 1000;
	public static final String MODEL = "삼성 X노트";
	
	public static final String STR = "hi";
	public static final boolean BL = true;
	public static final long L = 10000000000L;
	public static final float F = 3.14F;
	public static final double DB = 3.14;
	public static final char C = 'c';
	public static final byte B = 3;
	public static final short S = 3;
	
}

================================
< com.naver 패키지에 Phone 인터페이스 생성 >
package com.naver;

public interface Phone {
	public static final int PRICE = 100;
	
	public abstract int senfMsg(String from, String to, String msg);
}

================================
< com.naver 패키지에 SmartPhone 인터페이스 생성 >
package com.naver;

public interface SmartPhone extends Camera, PC, Phone{ // 인터페이스는 다중상속.부모클래스를 쓸수있다.
	
}

================================
< com.naver 패키지에 Iphone 클래스 생성 >
package com.naver;

public abstract class Iphone extends Object implements Camera, PC, Phone{

	@Override
	public int senfMsg(String from, String to, String msg) {
		
		return 0;
	}
	
	@Override
	public void take() {
		// TODO Auto-generated method stub
		
	}
	
	public void play() {
		System.out.println("게임합니다.");
	}
	
	
}


================================
< dwitt 패키지에 MainEx 클래스 생성 >
package kr.co.dwitt;

import com.naver.Iphone;
import com.naver.Phone;
import com.naver.SmartPhone;

public class MainEx {

	public static void main(String[] args) {
		Phone gal = new Iphone(); 
		
		//gal.play(); 인식이 안되서 오류뜸
		
		Iphone gal10 = null;
		if(gal10 instanceof Iphone) {
			gal10 = (Iphone)gal10;
			gal10.play();
		}
	}
}

======================================================
< MMS 프로젝트 생성 >
< dwitt 패키지에 Command 인터페이스 생성 >
package kr.co.dwitt;

import java.util.Scanner;

public interface Command {
	
	public abstract boolean execute(Scanner sc); 
	
}

========================
< com.naver 패키지에 InsertCommand 클래스 생성 >
package com.naver;

import java.util.Scanner;

import kr.co.dwitt.Command;

public class InsertCommand implements Command{

	@Override
	public boolean execute(Scanner sc) {
		// TODO Auto-generated method stub
		
		System.out.println("입력 기능");
		
		return true;
		
	}

}

========================
< com.naver 패키지에 StopCommand 클래스 생성 >
package com.naver;

import java.util.Scanner;

import kr.co.dwitt.Command;

public class StopCommand implements Command{

	@Override
	public boolean execute(Scanner sc) {
		
		return false;
	}

}

========================
< net.daum 패키지에 SelectCommand 클래스 생성 >
package net.daum;

import java.util.Scanner;

import kr.co.dwitt.Command;

public class SelectCommand implements Command{

	@Override
	public boolean execute(Scanner sc) {
		// TODO Auto-generated method stub
		System.out.println("조회 기능");
		
		return true;
		
	}

}

=========================
< dwitt 패키지에 MainEx 클래스 생성 >
package kr.co.dwitt;

import java.util.Scanner;

import com.naver.InsertCommand;
import com.naver.StopCommand;

import net.daum.SelectCommand;

public class MainEx {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner sc = new Scanner(System.in);
		
		Command[] menus = {new InsertCommand(), new SelectCommand(), new StopCommand()};
		
		Command menu = null;
				
		boolean isTrue = true;  // 무한반복
		
		while(isTrue) {
			System.out.println("메뉴를 선택하세요.");
			System.out.println("0: 입력, 1: 조회, 2: 종료");
			
			int idx = sc.nextInt();
			sc.nextLine();

			menu = menus[idx];
			// idx는 {new InsertCommand(), new SelectCommand(), new StopCommand()}를 말함
			
			isTrue = menu.execute(sc); // 무한반복할건지 빠져나올지 판단
						
		}
		
		sc.close();

	}

}


=============================
1. 내부클래스란?
- 클래스 내부에 생성된 클래스를 의미함
 
2. 내부클래스의 종류
- 멤버내부클래스: 클래스의 멤버변수가 선언되는 공간에 생성되는 내부클래스 
- static 내부클래스: static 키워드가 들어간 내부클래스
- local 내부클래스: 생성자나 메서드의 안에 생성된 내부클래스
- 익명의 내부클래스(구조적으로 class라는 키워드가 있어야 클래스입니다.)



===================
< InnerClassEx1 프로젝트 생성 >
< com.naver 패키지에 Dog 클래스 생성 >
package com.naver;

import javax.activation.CommandInfo;

import net.daum.Cat;
import net.daum.Command;

public class Dog {
	
	private int id;
	
	public class Test {
		private int score;
		
		public Test() {}

		public Test(int score) {
			super();
			this.score = score;
		}

		public int getScore() {
			return score;
		}

		public void setScore(int score) {
			this.score = score;
		}
		
	}

	public static class Test2{
		public void me1() {
			System.out.println("static");
		}
	}
	
	public static class Test3{
		private static int a;
	}
	
	public void sleep() {  // 로컬내부클래스
		 class Born{
			private int bid;
			 
			public Born() {
				// TODO Auto-generated constructor stub
			}

			public Born(int bid) {
				super();
				this.bid = bid;
			}
			 
		 }
		 
		 Born b = new Born();
	}
	
	public Command com1 = new Command() {
		
		@Override
		public void ex1() {
			System.out.println("익명의 내부클래스");
			
		}
	};
	
	public void eat() {  // 익명의 내부클래스

		new Command() {  
			
			@Override
			public void ex1() {
				// TODO Auto-generated method stub
				
			}
		}.ex1();  // 변수명도 없는 메서드 호출할때 .ex1(); 코드를 짠다.
		
		
		
		new Cat() {

			@Override
			public void attact() {
				// TODO Auto-generated method stub
				
			}			
		}.attact();  // 변수명도 없는 메서드 호출할때 .attact();  코드를 짠다.
	}

=======================
< net.daum 패키지에 Command 인터페이스 생성 >
package net.daum;

public interface Command {  // 인터페이스에는 생성자가 없다.
	
	public abstract void ex1();

}

=======================
< net.daum 패키지에 Cat 클래스 생성 >
package net.daum;

public abstract class Cat {
	
	public abstract void attact();

}


=======================
< dwitt 패키지에 MainEx 클래스 생성 >
package kr.co.dwitt;

import com.naver.Dog;

public class MainEx {

	public static void main(String[] args) {
		
		
		Dog.Test test1 = new Dog().new Test();
		
		System.out.println(test1.getScore());
		
		System.out.println("::::::::::");
		
		Dog.Test2 test2 = new Dog.Test2();
		test2.me1();
		
		Dog dog1 = new Dog();
		dog1.com1.ex1();
		
		
		new Thread(new Runnable() { // 쓰레드안에 익명의 내부클래스가 있다
			
			@Override
			public void run() {
				System.out.println("안녕1");
				
			}
		}).start();
		
		new Thread(new Runnable() {
			
			@Override
			public void run() {
				System.out.println("안녕2");
				
			}
		}).start();
		
		
		new Thread(new Runnable() { 
			
			@Override
			public void run() {
				System.out.println("안녕3");
				
			}
		}).start();
		
		
		new Thread(new Runnable() {
			
			@Override
			public void run() {
				System.out.println("안녕4");
				
			}
		}).start();

	}

}





































































